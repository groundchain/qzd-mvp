import{_ as t,c as a,o,ag as n}from"./chunks/framework.B0i2KhIm.js";const u=JSON.parse('{"title":"Merchant POS Manual","description":"","frontmatter":{},"headers":[],"relativePath":"manuals/merchant-operator.md","filePath":"manuals/merchant-operator.md","lastUpdated":1759451714000}'),i={name:"manuals/merchant-operator.md"};function r(c,e,s,l,h,d){return o(),a("div",null,[...e[0]||(e[0]=[n('<h1 id="merchant-pos-manual" tabindex="-1">Merchant POS Manual <a class="header-anchor" href="#merchant-pos-manual" aria-label="Permalink to &quot;Merchant POS Manual&quot;">​</a></h1><p>The merchant POS (<code>apps/merchant-pos</code>) allows cashiers to issue QR-code invoices and confirm payments against the transaction history of a merchant account.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><ul><li>POS app running via <code>pnpm --filter @qzd/merchant-pos dev -- --host 0.0.0.0</code> or <code>docker compose up merchant-pos</code>.</li><li>API reachable from the browser (<code>http://localhost:3000</code> by default).</li><li>Merchant account provisioned in the API.</li></ul><h2 id="authenticate" tabindex="-1">Authenticate <a class="header-anchor" href="#authenticate" aria-label="Permalink to &quot;Authenticate&quot;">​</a></h2><ol><li>Register a merchant operator under <strong>Create operator account</strong> to call <code>POST /auth/register</code> if needed.</li><li>Sign in with the credentials to invoke <code>POST /auth/login</code> and obtain a session token. The UI keeps the token in memory.</li></ol><h2 id="select-an-account-to-monitor" tabindex="-1">Select an account to monitor <a class="header-anchor" href="#select-an-account-to-monitor" aria-label="Permalink to &quot;Select an account to monitor&quot;">​</a></h2><ol><li>Enter the merchant account ID in <strong>Monitor account</strong>.</li><li>Submit to focus the dashboard on that account. Any existing invoices for other accounts are hidden to avoid mix-ups.</li></ol><h2 id="create-an-invoice" tabindex="-1">Create an invoice <a class="header-anchor" href="#create-an-invoice" aria-label="Permalink to &quot;Create an invoice&quot;">​</a></h2><ol><li>Fill in amount, currency, optional customer name, and description.</li><li>Submit to generate an invoice payload and QR code. The memo string encodes the invoice; share it with the payer.</li><li>The invoice is stored locally with status <code>pending</code> until a matching payment is detected.</li></ol><h2 id="confirm-payments" tabindex="-1">Confirm payments <a class="header-anchor" href="#confirm-payments" aria-label="Permalink to &quot;Confirm payments&quot;">​</a></h2><ul><li>The POS polls <code>GET /accounts/{id}/transactions</code> every five seconds. When a transaction memo matches a pending invoice, the UI marks it as <strong>Paid</strong>, records the transaction ID, and timestamps the payment.</li><li>Operators can export a PDF receipt or copy the memo from the invoice card.</li></ul><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><ul><li><strong>No payments detected</strong> – Verify the wallet transfer memo exactly matches the invoice memo and that the transfer targeted the correct account.</li><li><strong>Token expired</strong> – Re-authenticate to refresh the session token.</li><li><strong>QR code missing</strong> – Regenerate the invoice; the QR code is derived from the memo payload and requires the QRCode library to load.</li></ul>',14)])])}const p=t(i,[["render",r]]);export{u as __pageData,p as default};

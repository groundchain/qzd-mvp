import{_ as a,c as s,o as t,ag as i}from"./chunks/framework.B0i2KhIm.js";const k=JSON.parse('{"title":"API Workflow Guide","description":"","frontmatter":{},"headers":[],"relativePath":"api-readme.md","filePath":"api-readme.md","lastUpdated":1759451714000}'),n={name:"api-readme.md"};function p(o,e,r,l,d,h){return t(),s("div",null,[...e[0]||(e[0]=[i(`<h1 id="api-workflow-guide" tabindex="-1">API Workflow Guide <a class="header-anchor" href="#api-workflow-guide" aria-label="Permalink to &quot;API Workflow Guide&quot;">​</a></h1><p>The Quetzal Digital API is defined in <a href="https://github.com/groundchain/qzd-mvp/blob/main/openapi/openapi.yaml" target="_blank" rel="noreferrer"><code>openapi/openapi.yaml</code></a>. All server handlers, SDKs, contract tests, and external documentation are generated from this source of truth. Follow the workflow below whenever you need to change an endpoint or schema.</p><h2 id="_1-propose-and-edit-the-openapi-contract" tabindex="-1">1. Propose and edit the OpenAPI contract <a class="header-anchor" href="#_1-propose-and-edit-the-openapi-contract" aria-label="Permalink to &quot;1. Propose and edit the OpenAPI contract&quot;">​</a></h2><ol><li><p>Create a feature branch and update <code>openapi/openapi.yaml</code> with the desired changes. Keep tag descriptions and operation summaries consistent with the domain language used in the client applications.</p></li><li><p>Validate the contract locally before touching any code:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oas:lint</span></span></code></pre></div><p>The command runs Redocly linting and will fail if breaking changes or documentation gaps are detected.</p></li></ol><h2 id="_2-regenerate-server-stubs-and-sdks" tabindex="-1">2. Regenerate server stubs and SDKs <a class="header-anchor" href="#_2-regenerate-server-stubs-and-sdks" aria-label="Permalink to &quot;2. Regenerate server stubs and SDKs&quot;">​</a></h2><p>Regenerate all derived artifacts so that the NestJS controllers and the TypeScript clients stay aligned with the spec:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen:sdks</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # server + browser + node SDKs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gen:types</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # shared TypeScript types consumed by @qzd/shared</span></span></code></pre></div><p>You can also run <code>pnpm gen:all</code> to execute both commands in sequence. Never edit files under <code>packages/sdk-api/src/*/generated</code>—they are replaced on every run.</p><h2 id="_3-update-tests-and-documentation" tabindex="-1">3. Update tests and documentation <a class="header-anchor" href="#_3-update-tests-and-documentation" aria-label="Permalink to &quot;3. Update tests and documentation&quot;">​</a></h2><ul><li><p>Adjust handlers in <code>apps/api</code> and supporting domain packages to satisfy the new contract. Keep handlers thin and defer validation to the generated DTOs.</p></li><li><p>Update Vitest suites, contract tests (<code>pnpm test:contract</code>), and manuals so they describe the new behaviour.</p></li><li><p>Rebuild the HTML preview of the specification if you want to share it outside the monorepo:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oas:docs</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # outputs to openapi/dist/index.html</span></span></code></pre></div></li></ul><h2 id="_4-verify-before-committing" tabindex="-1">4. Verify before committing <a class="header-anchor" href="#_4-verify-before-committing" aria-label="Permalink to &quot;4. Verify before committing&quot;">​</a></h2><p>Run the monorepo quality gates before raising a pull request:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typecheck</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test:contract</span></span></code></pre></div><p>The Husky hooks enforce these checks on CI, so running them locally keeps the pipeline green. Capture any notable manual validation in your PR description.</p>`,14)])])}const u=a(n,[["render",p]]);export{k as __pageData,u as default};

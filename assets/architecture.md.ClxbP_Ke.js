import{_ as t,c as o,o as a,ag as r}from"./chunks/framework.B0i2KhIm.js";const m=JSON.parse('{"title":"System Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"architecture.md","filePath":"architecture.md","lastUpdated":1759451714000}'),s={name:"architecture.md"};function i(n,e,c,d,l,p){return a(),o("div",null,[...e[0]||(e[0]=[r('<h1 id="system-architecture" tabindex="-1">System Architecture <a class="header-anchor" href="#system-architecture" aria-label="Permalink to &quot;System Architecture&quot;">​</a></h1><p>Quetzal Digital is organised as a pnpm-managed monorepo with a clear separation between runtime applications, reusable packages, and generated SDKs.</p><h2 id="high-level-topology" tabindex="-1">High-level topology <a class="header-anchor" href="#high-level-topology" aria-label="Permalink to &quot;High-level topology&quot;">​</a></h2><ul><li><strong>API (<code>apps/api</code>)</strong> – NestJS service that exposes the OpenAPI contract defined in <code>openapi/openapi.yaml</code>. It orchestrates the in-memory ledger, validates requests with generated DTOs, and emits Prometheus metrics.</li><li><strong>Wallet Web (<code>apps/wallet-web</code>)</strong> – Vite + React single-page app for retail customers. It consumes the browser SDK to register, load balances, send transfers, and preview remittance quotes.</li><li><strong>Admin Web (<code>apps/admin-web</code>)</strong> – React console for operations teams to review alerts, shepherd issuance requests to completion, and redeem agent vouchers.</li><li><strong>Merchant POS (<code>apps/merchant-pos</code>)</strong> – React-based point-of-sale terminal that issues QR-code invoices and reconciles incoming wallet transfers.</li><li><strong>SMS Simulator (<code>apps/sms-sim</code>)</strong> – Node.js CLI that reproduces inbound SMS traffic against the <code>/sms/inbound</code> endpoint for manual testing.</li></ul><p>Support packages include:</p><ul><li><strong><code>packages/shared</code></strong> – TypeScript types shared across apps. Hosts the generated OpenAPI typings consumed by UI forms.</li><li><strong><code>packages/ledger</code></strong> – Append-only ledger and signature primitives used by the API service.</li><li><strong><code>packages/sdk</code></strong> – Thin wrappers around the generated API clients, adding ergonomic helpers and auth integration.</li><li><strong><code>packages/sdk-api</code></strong> – Generated clients for NestJS, browser fetch, and Axios environments. Never edit files in the <code>generated</code> directories.</li></ul><h2 id="environment-orchestration" tabindex="-1">Environment orchestration <a class="header-anchor" href="#environment-orchestration" aria-label="Permalink to &quot;Environment orchestration&quot;">​</a></h2><p><code>docker-compose.yaml</code> spins up the entire developer stack:</p><ul><li>Postgres for persistence, seeded via <code>pnpm --filter @qzd/api exec node scripts/seed-dev.mjs</code>.</li><li>The API service plus Wallet, Admin, Merchant POS, and SMS simulator frontends.</li><li>Prism mock server for contract testing at <a href="http://localhost:4010" target="_blank" rel="noreferrer">http://localhost:4010</a>.</li><li>Observability stack (Prometheus + Grafana).</li><li>Static docs served from <code>docs/</code> alongside a Redoc rendering of the contract.</li></ul><p>Use <code>make dev</code> to launch the full stack or <code>make mock</code> when only Prism-backed contract testing is required.</p>',10)])])}const g=t(s,[["render",i]]);export{m as __pageData,g as default};

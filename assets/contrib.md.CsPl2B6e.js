import{_ as t,c as a,o as i,ag as o}from"./chunks/framework.B0i2KhIm.js";const p=JSON.parse('{"title":"Contributor Checklist","description":"","frontmatter":{},"headers":[],"relativePath":"contrib.md","filePath":"contrib.md","lastUpdated":1759451714000}'),n={name:"contrib.md"};function c(r,e,l,s,d,u){return i(),a("div",null,[...e[0]||(e[0]=[o('<h1 id="contributor-checklist" tabindex="-1">Contributor Checklist <a class="header-anchor" href="#contributor-checklist" aria-label="Permalink to &quot;Contributor Checklist&quot;">​</a></h1><p>Follow this checklist before requesting a review. It mirrors the repository automation (Husky + GitHub Actions) and the expectations documented in <code>AGENTS.md</code>.</p><h2 id="pre-flight" tabindex="-1">Pre-flight <a class="header-anchor" href="#pre-flight" aria-label="Permalink to &quot;Pre-flight&quot;">​</a></h2><ul><li>[ ] The change is described in the pull request summary with context and links to any related issues.</li><li>[ ] Conventional Commit message prepared (e.g. <code>feat(api): add cash-out limit</code>).</li><li>[ ] New environment variables, migrations, or docker-compose updates are called out in the PR description.</li></ul><h2 id="quality-gates" tabindex="-1">Quality gates <a class="header-anchor" href="#quality-gates" aria-label="Permalink to &quot;Quality gates&quot;">​</a></h2><ul><li>[ ] <code>pnpm lint</code></li><li>[ ] <code>pnpm typecheck</code></li><li>[ ] <code>pnpm test</code></li><li>[ ] <code>pnpm test:contract</code> (required whenever the OpenAPI contract or SDKs change)</li><li>[ ] <code>pnpm gen:sdks</code> (run and commit results when the contract changes)</li></ul><h2 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h2><ul><li>[ ] OpenAPI spec updates live in <code>openapi/openapi.yaml</code> and were linted with <code>pnpm oas:lint</code>.</li><li>[ ] Redoc preview rebuilt with <code>pnpm oas:docs</code> when sharing external contract updates.</li><li>[ ] Relevant manuals in <code>docs/manuals/</code> mention new user-facing behaviour.</li><li>[ ] <code>docs/index.html</code> links to any new documentation artefacts.</li></ul>',8)])])}const m=t(n,[["render",c]]);export{p as __pageData,m as default};

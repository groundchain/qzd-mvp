import{_ as t,c as a,o,ag as d}from"./chunks/framework.B0i2KhIm.js";const u=JSON.parse('{"title":"Operations Runbook","description":"","frontmatter":{},"headers":[],"relativePath":"runbook.md","filePath":"runbook.md","lastUpdated":1759451714000}'),r={name:"runbook.md"};function s(n,e,c,i,l,h){return o(),a("div",null,[...e[0]||(e[0]=[d('<h1 id="operations-runbook" tabindex="-1">Operations Runbook <a class="header-anchor" href="#operations-runbook" aria-label="Permalink to &quot;Operations Runbook&quot;">​</a></h1><p>This runbook maps operational procedures to the OpenAPI endpoints implemented in <code>apps/api</code>. Use it during incidents and routine maintenance.</p><h2 id="quick-references" tabindex="-1">Quick references <a class="header-anchor" href="#quick-references" aria-label="Permalink to &quot;Quick references&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Scenario</th><th>Endpoints</th><th>Notes</th></tr></thead><tbody><tr><td>API health check</td><td><code>GET /health/live</code>, <code>GET /health/ready</code></td><td>Use <code>/health/live</code> for liveness and <code>/health/ready</code> before routing traffic.</td></tr><tr><td>Metrics scrape</td><td><code>GET /metrics</code></td><td>Prometheus scrape target exposed by the NestJS server.</td></tr><tr><td>User onboarding outage</td><td><code>POST /auth/register</code>, <code>POST /accounts</code>, <code>POST /accounts/kyc</code></td><td>Validate payloads and auth headers; see <code>apps/api/src/in-memory-bank.service.ts</code>.</td></tr><tr><td>Login/auth token issues</td><td><code>POST /auth/login</code></td><td>Inspect JWT configuration and expiry handling.</td></tr><tr><td>Balance mismatch</td><td><code>GET /accounts/{id}/balance</code>, <code>GET /accounts/{id}/transactions</code></td><td>Compare responses with ledger events in <code>packages/ledger</code>.</td></tr><tr><td>Transfer stuck in pending</td><td><code>POST /tx/transfer</code></td><td>Ensure idempotency keys are unique and inspect error payloads.</td></tr><tr><td>Issuance backlog</td><td><code>POST /tx/issue</code>, <code>GET /admin/issuance-requests</code>, <code>POST /admin/issuance-requests/{id}/sign</code></td><td>Confirm validator quorum; retry signatures if the queue stalls.</td></tr><tr><td>Voucher redemption failure</td><td><code>POST /agents/cashin</code>, <code>POST /agents/cashout</code>, <code>POST /agents/vouchers/{code}/redeem</code></td><td>Check agent idempotency keys and voucher lifecycle fields.</td></tr><tr><td>Remittance quote errors</td><td><code>POST /simulate/quote</code>, <code>POST /remit/us/acquire-qzd</code></td><td>Validate scenario flags and currency codes; align with wallet quote UI.</td></tr><tr><td>Alert ingestion</td><td><code>GET /admin/alerts</code>, <code>POST /admin/alerts/{id}/ack</code></td><td>Verify the admin console receives alerts and ack responses return 204.</td></tr><tr><td>SMS command errors</td><td><code>POST /sms/inbound</code></td><td>Use the SMS simulator (<code>pnpm --filter @qzd/sms-sim start</code>) to reproduce issues.</td></tr></tbody></table><h2 id="standard-operating-procedures" tabindex="-1">Standard operating procedures <a class="header-anchor" href="#standard-operating-procedures" aria-label="Permalink to &quot;Standard operating procedures&quot;">​</a></h2><h3 id="_1-confirm-platform-status" tabindex="-1">1. Confirm platform status <a class="header-anchor" href="#_1-confirm-platform-status" aria-label="Permalink to &quot;1. Confirm platform status&quot;">​</a></h3><ol><li>Call <code>GET /health/live</code> and <code>GET /health/ready</code>.</li><li>If <code>/health/ready</code> fails, inspect recent deployments and database connectivity.</li><li>Review Prometheus at <a href="http://localhost:9090" target="_blank" rel="noreferrer">http://localhost:9090</a> and Grafana at <a href="http://localhost:3001" target="_blank" rel="noreferrer">http://localhost:3001</a> when running via Docker Compose.</li></ol><h3 id="_2-regenerate-sdks-after-contract-updates" tabindex="-1">2. Regenerate SDKs after contract updates <a class="header-anchor" href="#_2-regenerate-sdks-after-contract-updates" aria-label="Permalink to &quot;2. Regenerate SDKs after contract updates&quot;">​</a></h3><ol><li>Validate the contract with <code>pnpm oas:lint</code>.</li><li>Run <code>pnpm gen:sdks</code> and <code>pnpm gen:types</code>.</li><li>Execute <code>pnpm test:contract</code> to assert SDK compatibility against the Prism mock server (<code>pnpm oas:mock</code>).</li><li>Deploy updated packages to downstream applications.</li></ol><h3 id="_3-recover-from-degraded-cash-operations" tabindex="-1">3. Recover from degraded cash operations <a class="header-anchor" href="#_3-recover-from-degraded-cash-operations" aria-label="Permalink to &quot;3. Recover from degraded cash operations&quot;">​</a></h3><ol><li>Confirm agent API calls (<code>POST /agents/cashin</code>, <code>POST /agents/cashout</code>) are returning 202 responses. Retry idempotent requests with new keys if 409s are returned.</li><li>Inspect vouchers via <code>POST /agents/vouchers/{code}/redeem</code>; a 404 indicates a previously consumed or expired voucher.</li><li>Coordinate with admin operators to clear issuance backlog via <code>POST /admin/issuance-requests/{id}/sign</code>.</li></ol><h3 id="_4-handle-sms-command-regressions" tabindex="-1">4. Handle SMS command regressions <a class="header-anchor" href="#_4-handle-sms-command-regressions" aria-label="Permalink to &quot;4. Handle SMS command regressions&quot;">​</a></h3><ol><li>Use the SMS simulator to send the failing command: <code>pnpm --filter @qzd/sms-sim start</code>.</li><li>Trace the API handler at <code>/sms/inbound</code> and ensure responses include a <code>reply</code> string.</li><li>Compare behaviour against the OpenAPI example payloads in <code>openapi/openapi.yaml</code>.</li></ol><p>Document any novel remediation in this file so on-call engineers can repeat it.</p>',14)])])}const m=t(r,[["render",s]]);export{u as __pageData,m as default};

import{_ as a,c as s,o as t,ag as i}from"./chunks/framework.B0i2KhIm.js";const u=JSON.parse('{"title":"SMS Operations Manual","description":"","frontmatter":{},"headers":[],"relativePath":"manuals/sms-operator.md","filePath":"manuals/sms-operator.md","lastUpdated":1759451714000}'),o={name:"manuals/sms-operator.md"};function r(n,e,l,d,h,c){return t(),s("div",null,[...e[0]||(e[0]=[i('<h1 id="sms-operations-manual" tabindex="-1">SMS Operations Manual <a class="header-anchor" href="#sms-operations-manual" aria-label="Permalink to &quot;SMS Operations Manual&quot;">​</a></h1><p>The SMS simulator (<code>apps/sms-sim</code>) is a Node.js CLI used to reproduce inbound messages against the <code>/sms/inbound</code> API endpoint. Use it for QA and to verify the runbook steps for SMS regressions.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><ul><li>Node.js 20 (provided by Docker Compose or your local environment).</li><li>API running and reachable at the base URL you intend to target.</li></ul><h2 id="launch-the-simulator" tabindex="-1">Launch the simulator <a class="header-anchor" href="#launch-the-simulator" aria-label="Permalink to &quot;Launch the simulator&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @qzd/sms-sim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --base</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:3000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --from</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5025551000</span></span></code></pre></div><p>Options:</p><ul><li><code>--base</code> (or <code>-b</code>) sets the API base URL. Defaults to <code>http://localhost:3000</code>.</li><li><code>--from</code> (or <code>-f</code>) configures the MSISDN that will appear in the request body.</li></ul><h2 id="interactive-commands" tabindex="-1">Interactive commands <a class="header-anchor" href="#interactive-commands" aria-label="Permalink to &quot;Interactive commands&quot;">​</a></h2><p>Once the prompt is active:</p><ul><li>Type an SMS payload (e.g. <code>BAL</code> or <code>SEND 50 5025552222</code>) and press Enter. The CLI issues <code>POST /sms/inbound</code> and prints the API reply prefixed with <code>&lt;&lt;</code>.</li><li>Use <code>/from &lt;msisdn&gt;</code> to change the sender without restarting the process.</li><li>Use <code>/base &lt;url&gt;</code> to update the target API URL.</li><li>Use <code>/quit</code> or <code>/exit</code> to stop the simulator.</li></ul><h2 id="error-handling" tabindex="-1">Error handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error handling&quot;">​</a></h2><ul><li>Non-2xx responses surface as <code>API error &lt;status&gt;: &lt;message&gt;</code> messages.</li><li>Malformed responses (missing <code>reply</code>) raise validation errors so handlers can be fixed before shipping to production.</li></ul><p>Document repeatable SMS scenarios in this manual so QA can replay them quickly.</p>',14)])])}const m=a(o,[["render",r]]);export{u as __pageData,m as default};

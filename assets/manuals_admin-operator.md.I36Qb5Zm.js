import{_ as a,c as t,o,ag as i}from"./chunks/framework.B0i2KhIm.js";const m=JSON.parse('{"title":"Admin Operator Manual","description":"","frontmatter":{},"headers":[],"relativePath":"manuals/admin-operator.md","filePath":"manuals/admin-operator.md","lastUpdated":1759451714000}'),s={name:"manuals/admin-operator.md"};function r(n,e,l,d,c,u){return o(),t("div",null,[...e[0]||(e[0]=[i('<h1 id="admin-operator-manual" tabindex="-1">Admin Operator Manual <a class="header-anchor" href="#admin-operator-manual" aria-label="Permalink to &quot;Admin Operator Manual&quot;">​</a></h1><p>The admin console (<code>apps/admin-web</code>) gives operations staff tools to manage issuance queues and agent vouchers. It expects a privileged access token issued by the API.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><ul><li>Admin service running via <code>pnpm --filter @qzd/admin-web dev -- --host 0.0.0.0</code> or <code>docker compose up admin-web</code>.</li><li>API reachable from the browser (default <code>http://localhost:3000</code>).</li><li>Access token generated through an admin authentication flow.</li></ul><h2 id="connect-to-the-api" tabindex="-1">Connect to the API <a class="header-anchor" href="#connect-to-the-api" aria-label="Permalink to &quot;Connect to the API&quot;">​</a></h2><ol><li>Enter the API base URL if different from the default.</li><li>Paste a bearer token with admin privileges.</li><li>Submit <strong>Save connection</strong>. Subsequent requests include the token in the <code>Authorization</code> header.</li></ol><h2 id="redeem-agent-vouchers" tabindex="-1">Redeem agent vouchers <a class="header-anchor" href="#redeem-agent-vouchers" aria-label="Permalink to &quot;Redeem agent vouchers&quot;">​</a></h2><ol><li>Open <strong>Voucher redemption</strong>.</li><li>Paste the voucher code provided by a field agent.</li><li>Submit to call <code>POST /agents/vouchers/{code}/redeem</code>. The UI displays amount, fees, timestamps, and metadata returned by the API.</li><li>Share the confirmation message with the agent if needed.</li></ol><h2 id="create-an-issuance-request" tabindex="-1">Create an issuance request <a class="header-anchor" href="#create-an-issuance-request" aria-label="Permalink to &quot;Create an issuance request&quot;">​</a></h2><ol><li>In <strong>Create issuance request</strong>, provide the customer account ID, amount, and optional reference memo.</li><li>Submit to invoke <code>POST /admin/issuance-requests</code>. The console clears the form and refreshes the queue.</li><li>Use consistent currency codes (<code>QZD</code>, <code>USD</code>, etc.) to align with ledger rules.</li></ol><h2 id="sign-issuance-requests" tabindex="-1">Sign issuance requests <a class="header-anchor" href="#sign-issuance-requests" aria-label="Permalink to &quot;Sign issuance requests&quot;">​</a></h2><ol><li>Choose the validator identity from the dropdown (defaults to <code>validator-1</code>).</li><li>Click <strong>Refresh queue</strong> to load pending items via <code>GET /admin/issuance-requests</code>.</li><li>For each request, press <strong>Sign as ...</strong> to call <code>POST /admin/issuance-requests/{id}/sign</code>. The UI manages idempotency keys.</li><li>Completed requests disappear once the quorum is met.</li></ol><h2 id="tips" tabindex="-1">Tips <a class="header-anchor" href="#tips" aria-label="Permalink to &quot;Tips&quot;">​</a></h2><ul><li>Keep the console open while processing requests so the automatic refresh can fetch new items after each action.</li><li>Validation errors return detailed messages; surface them in support channels so API teams can adjust the OpenAPI contract if needed.</li></ul>',14)])])}const p=a(s,[["render",r]]);export{m as __pageData,p as default};

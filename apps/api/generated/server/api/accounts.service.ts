/**
 * QZD Platform API
 * The QZD Platform API exposes authentication, account, ledger, remittance, and validator administration capabilities for wallet operators and platform integrations. The contract is defined up-front to enable client/server scaffolding via OpenAPI Generator. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { Account } from '../model/account';
import { AccountBalance } from '../model/accountBalance';
import { CreateAccountRequest } from '../model/createAccountRequest';
import { ErrorResponse } from '../model/errorResponse';
import { LedgerHistoryResponse } from '../model/ledgerHistoryResponse';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class AccountsService {

    protected basePath = 'http://localhost:3000';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Create a new account
     * 
     * @param createAccountRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [createAccountOpts.config] Override http request option.
     */
    public createAccount(createAccountRequest: CreateAccountRequest, createAccountOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<Account>>;
    public createAccount(createAccountRequest: CreateAccountRequest, createAccountOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (createAccountRequest === null || createAccountRequest === undefined) {
            throw new Error('Required parameter createAccountRequest was null or undefined when calling createAccount.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (BearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<Account>(`${this.basePath}/accounts`,
                    createAccountRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...createAccountOpts?.config,
                        headers: {...headers, ...createAccountOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Fetch the latest account balance
     * 
     * @param accountId Unique identifier of the account.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getAccountBalanceOpts.config] Override http request option.
     */
    public getAccountBalance(accountId: string, getAccountBalanceOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<AccountBalance>>;
    public getAccountBalance(accountId: string, getAccountBalanceOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getAccountBalance.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (BearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<AccountBalance>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/balance`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...getAccountBalanceOpts?.config,
                        headers: {...headers, ...getAccountBalanceOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Retrieve paginated ledger activity for an account
     * 
     * @param accountId Unique identifier of the account.
     * @param cursor Continuation token for pagination.
     * @param limit Maximum number of items to return (defaults to 50).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getAccountHistoryOpts.config] Override http request option.
     */
    public getAccountHistory(accountId: string, cursor?: string, limit?: number, getAccountHistoryOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<LedgerHistoryResponse>>;
    public getAccountHistory(accountId: string, cursor?: string, limit?: number, getAccountHistoryOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getAccountHistory.');
        }

        let queryParameters = new URLSearchParams();
        if (cursor !== undefined && cursor !== null) {
            queryParameters.append('cursor', <any>cursor);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (BearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<LedgerHistoryResponse>(`${this.basePath}/accounts/${encodeURIComponent(String(accountId))}/history`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        ...getAccountHistoryOpts?.config,
                        headers: {...headers, ...getAccountHistoryOpts?.config?.headers},
                    }
                );
            })
        );
    }
}

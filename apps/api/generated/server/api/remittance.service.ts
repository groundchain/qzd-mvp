/**
 * QZD Platform API
 * The QZD Platform API exposes authentication, account, ledger, remittance, and validator administration capabilities for wallet operators and platform integrations. The contract is defined up-front to enable client/server scaffolding via OpenAPI Generator. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { AcquireRemittanceRequest } from '../model/acquireRemittanceRequest';
import { ErrorResponse } from '../model/errorResponse';
import { RemittanceAcceptedResponse } from '../model/remittanceAcceptedResponse';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class RemittanceService {

    protected basePath = 'http://localhost:3000';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Acquire QZD using USD deposits
     * 
     * @param acquireRemittanceRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [remitAcquireQzdOpts.config] Override http request option.
     */
    public remitAcquireQzd(acquireRemittanceRequest: AcquireRemittanceRequest, remitAcquireQzdOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<RemittanceAcceptedResponse>>;
    public remitAcquireQzd(acquireRemittanceRequest: AcquireRemittanceRequest, remitAcquireQzdOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (acquireRemittanceRequest === null || acquireRemittanceRequest === undefined) {
            throw new Error('Required parameter acquireRemittanceRequest was null or undefined when calling remitAcquireQzd.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (BankAgentAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<RemittanceAcceptedResponse>(`${this.basePath}/remit/us/acquire-qzd`,
                    acquireRemittanceRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...remitAcquireQzdOpts?.config,
                        headers: {...headers, ...remitAcquireQzdOpts?.config?.headers},
                    }
                );
            })
        );
    }
}

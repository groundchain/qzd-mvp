/* tslint:disable */
/* eslint-disable */
/**
 * QZD Remittance API
 * The QZD Remittance API enables account management, digital asset issuance and redemption, and remittance operations with comprehensive observability and admin tooling. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  Account,
  Balance,
  CreateAccountRequest,
  ListAccountTransactions200Response,
  UploadAccountKycRequest,
} from '../models/index.js';
import {
    AccountFromJSON,
    AccountToJSON,
    BalanceFromJSON,
    BalanceToJSON,
    CreateAccountRequestFromJSON,
    CreateAccountRequestToJSON,
    ListAccountTransactions200ResponseFromJSON,
    ListAccountTransactions200ResponseToJSON,
    UploadAccountKycRequestFromJSON,
    UploadAccountKycRequestToJSON,
} from '../models/index.js';

export interface CreateAccountOperationRequest {
    createAccountRequest: CreateAccountRequest;
}

export interface GetAccountBalanceRequest {
    id: string;
}

export interface ListAccountTransactionsRequest {
    id: string;
    limit?: number;
    cursor?: string;
}

export interface UploadAccountKycOperationRequest {
    uploadAccountKycRequest: UploadAccountKycRequest;
}

/**
 * AccountsApi - interface
 * 
 * @export
 * @interface AccountsApiInterface
 */
export interface AccountsApiInterface {
    /**
     * 
     * @summary Create a new remittance ledger account.
     * @param {CreateAccountRequest} createAccountRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    createAccountRaw(requestParameters: CreateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>>;

    /**
     * Create a new remittance ledger account.
     */
    createAccount(requestParameters: CreateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account>;

    /**
     * 
     * @summary Retrieve the latest balance snapshot for an account.
     * @param {string} id Unique account identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountBalanceRaw(requestParameters: GetAccountBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Balance>>;

    /**
     * Retrieve the latest balance snapshot for an account.
     */
    getAccountBalance(requestParameters: GetAccountBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Balance>;

    /**
     * 
     * @summary List transactions recorded for a specific account.
     * @param {string} id Unique account identifier.
     * @param {number} [limit] Maximum number of transactions to return.
     * @param {string} [cursor] Cursor token for pagination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    listAccountTransactionsRaw(requestParameters: ListAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListAccountTransactions200Response>>;

    /**
     * List transactions recorded for a specific account.
     */
    listAccountTransactions(requestParameters: ListAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListAccountTransactions200Response>;

    /**
     * Upload new metadata, documents, or questionnaire answers to advance an account\'s KYC status. Approved submissions can upgrade the account to FULL status, unlocking higher daily transfer limits.
     * @summary Submit KYC evidence for an existing account.
     * @param {UploadAccountKycRequest} uploadAccountKycRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    uploadAccountKycRaw(requestParameters: UploadAccountKycOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>>;

    /**
     * Upload new metadata, documents, or questionnaire answers to advance an account\'s KYC status. Approved submissions can upgrade the account to FULL status, unlocking higher daily transfer limits.
     * Submit KYC evidence for an existing account.
     */
    uploadAccountKyc(requestParameters: UploadAccountKycOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account>;

}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI implements AccountsApiInterface {

    /**
     * Create a new remittance ledger account.
     */
    async createAccountRaw(requestParameters: CreateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters['createAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'createAccountRequest',
                'Required parameter "createAccountRequest" was null or undefined when calling createAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/accounts`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAccountRequestToJSON(requestParameters['createAccountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Create a new remittance ledger account.
     */
    async createAccount(requestParameters: CreateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.createAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the latest balance snapshot for an account.
     */
    async getAccountBalanceRaw(requestParameters: GetAccountBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Balance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAccountBalance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/accounts/{id}/balance`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BalanceFromJSON(jsonValue));
    }

    /**
     * Retrieve the latest balance snapshot for an account.
     */
    async getAccountBalance(requestParameters: GetAccountBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Balance> {
        const response = await this.getAccountBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List transactions recorded for a specific account.
     */
    async listAccountTransactionsRaw(requestParameters: ListAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListAccountTransactions200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listAccountTransactions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/accounts/{id}/transactions`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListAccountTransactions200ResponseFromJSON(jsonValue));
    }

    /**
     * List transactions recorded for a specific account.
     */
    async listAccountTransactions(requestParameters: ListAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListAccountTransactions200Response> {
        const response = await this.listAccountTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload new metadata, documents, or questionnaire answers to advance an account\'s KYC status. Approved submissions can upgrade the account to FULL status, unlocking higher daily transfer limits.
     * Submit KYC evidence for an existing account.
     */
    async uploadAccountKycRaw(requestParameters: UploadAccountKycOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters['uploadAccountKycRequest'] == null) {
            throw new runtime.RequiredError(
                'uploadAccountKycRequest',
                'Required parameter "uploadAccountKycRequest" was null or undefined when calling uploadAccountKyc().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/accounts/kyc`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadAccountKycRequestToJSON(requestParameters['uploadAccountKycRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Upload new metadata, documents, or questionnaire answers to advance an account\'s KYC status. Approved submissions can upgrade the account to FULL status, unlocking higher daily transfer limits.
     * Submit KYC evidence for an existing account.
     */
    async uploadAccountKyc(requestParameters: UploadAccountKycOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.uploadAccountKycRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * QZD Remittance API
 * The QZD Remittance API enables account management, digital asset issuance and redemption, and remittance operations with comprehensive observability and admin tooling. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  IssueEnvelope,
  IssueRequest,
  ListAccountTransactions200Response,
  RedeemRequest,
  Transaction,
  TransferRequest,
} from '../models/index.js';
import {
    IssueEnvelopeFromJSON,
    IssueEnvelopeToJSON,
    IssueRequestFromJSON,
    IssueRequestToJSON,
    ListAccountTransactions200ResponseFromJSON,
    ListAccountTransactions200ResponseToJSON,
    RedeemRequestFromJSON,
    RedeemRequestToJSON,
    TransactionFromJSON,
    TransactionToJSON,
    TransferRequestFromJSON,
    TransferRequestToJSON,
} from '../models/index.js';

export interface InitiateTransferRequest {
    transferRequest: TransferRequest;
}

export interface IssueTokensRequest {
    issueRequest: IssueRequest;
}

export interface ListAccountTransactionsRequest {
    id: string;
    limit?: number;
    cursor?: string;
}

export interface RedeemTokensRequest {
    redeemRequest: RedeemRequest;
}

/**
 * TransactionsApi - interface
 * 
 * @export
 * @interface TransactionsApiInterface
 */
export interface TransactionsApiInterface {
    /**
     * Transfers are limited by the originating account\'s KYC tier. BASIC accounts may send up to Q5,000 per day while FULL accounts may send up to Q50,000 per day. Requests exceeding these thresholds will be rejected with a LIMIT_EXCEEDED error.
     * @summary Move balances between accounts.
     * @param {TransferRequest} transferRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    initiateTransferRaw(requestParameters: InitiateTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>>;

    /**
     * Transfers are limited by the originating account\'s KYC tier. BASIC accounts may send up to Q5,000 per day while FULL accounts may send up to Q50,000 per day. Requests exceeding these thresholds will be rejected with a LIMIT_EXCEEDED error.
     * Move balances between accounts.
     */
    initiateTransfer(requestParameters: InitiateTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction>;

    /**
     * 
     * @summary Issue new QZD tokens to an account.
     * @param {IssueRequest} issueRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    issueTokensRaw(requestParameters: IssueTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueEnvelope>>;

    /**
     * Issue new QZD tokens to an account.
     */
    issueTokens(requestParameters: IssueTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueEnvelope>;

    /**
     * 
     * @summary List transactions recorded for a specific account.
     * @param {string} id Unique account identifier.
     * @param {number} [limit] Maximum number of transactions to return.
     * @param {string} [cursor] Cursor token for pagination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    listAccountTransactionsRaw(requestParameters: ListAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListAccountTransactions200Response>>;

    /**
     * List transactions recorded for a specific account.
     */
    listAccountTransactions(requestParameters: ListAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListAccountTransactions200Response>;

    /**
     * 
     * @summary Redeem QZD tokens for fiat settlement.
     * @param {RedeemRequest} redeemRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    redeemTokensRaw(requestParameters: RedeemTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>>;

    /**
     * Redeem QZD tokens for fiat settlement.
     */
    redeemTokens(requestParameters: RedeemTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction>;

}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI implements TransactionsApiInterface {

    /**
     * Transfers are limited by the originating account\'s KYC tier. BASIC accounts may send up to Q5,000 per day while FULL accounts may send up to Q50,000 per day. Requests exceeding these thresholds will be rejected with a LIMIT_EXCEEDED error.
     * Move balances between accounts.
     */
    async initiateTransferRaw(requestParameters: InitiateTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>> {
        if (requestParameters['transferRequest'] == null) {
            throw new runtime.RequiredError(
                'transferRequest',
                'Required parameter "transferRequest" was null or undefined when calling initiateTransfer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/tx/transfer`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferRequestToJSON(requestParameters['transferRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionFromJSON(jsonValue));
    }

    /**
     * Transfers are limited by the originating account\'s KYC tier. BASIC accounts may send up to Q5,000 per day while FULL accounts may send up to Q50,000 per day. Requests exceeding these thresholds will be rejected with a LIMIT_EXCEEDED error.
     * Move balances between accounts.
     */
    async initiateTransfer(requestParameters: InitiateTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction> {
        const response = await this.initiateTransferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Issue new QZD tokens to an account.
     */
    async issueTokensRaw(requestParameters: IssueTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueEnvelope>> {
        if (requestParameters['issueRequest'] == null) {
            throw new runtime.RequiredError(
                'issueRequest',
                'Required parameter "issueRequest" was null or undefined when calling issueTokens().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/tx/issue`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IssueRequestToJSON(requestParameters['issueRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueEnvelopeFromJSON(jsonValue));
    }

    /**
     * Issue new QZD tokens to an account.
     */
    async issueTokens(requestParameters: IssueTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueEnvelope> {
        const response = await this.issueTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List transactions recorded for a specific account.
     */
    async listAccountTransactionsRaw(requestParameters: ListAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListAccountTransactions200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listAccountTransactions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/accounts/{id}/transactions`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListAccountTransactions200ResponseFromJSON(jsonValue));
    }

    /**
     * List transactions recorded for a specific account.
     */
    async listAccountTransactions(requestParameters: ListAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListAccountTransactions200Response> {
        const response = await this.listAccountTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Redeem QZD tokens for fiat settlement.
     */
    async redeemTokensRaw(requestParameters: RedeemTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>> {
        if (requestParameters['redeemRequest'] == null) {
            throw new runtime.RequiredError(
                'redeemRequest',
                'Required parameter "redeemRequest" was null or undefined when calling redeemTokens().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/tx/redeem`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedeemRequestToJSON(requestParameters['redeemRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionFromJSON(jsonValue));
    }

    /**
     * Redeem QZD tokens for fiat settlement.
     */
    async redeemTokens(requestParameters: RedeemTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction> {
        const response = await this.redeemTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * QZD Remittance API
 * The QZD Remittance API enables account management, digital asset issuance and redemption, and remittance operations with comprehensive observability and admin tooling. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { IssueRequest } from './IssueRequest.js';
import {
    IssueRequestFromJSON,
    IssueRequestFromJSONTyped,
    IssueRequestToJSON,
    IssueRequestToJSONTyped,
} from './IssueRequest.js';

/**
 * 
 * @export
 * @interface IssueEnvelope
 */
export interface IssueEnvelope {
    /**
     * 
     * @type {string}
     * @memberof IssueEnvelope
     */
    envelopeId: string;
    /**
     * 
     * @type {string}
     * @memberof IssueEnvelope
     */
    status: IssueEnvelopeStatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof IssueEnvelope
     */
    submittedAt: Date;
    /**
     * 
     * @type {IssueRequest}
     * @memberof IssueEnvelope
     */
    request: IssueRequest;
}


/**
 * @export
 */
export const IssueEnvelopeStatusEnum = {
    Pending: 'pending',
    Completed: 'completed',
    Failed: 'failed'
} as const;
export type IssueEnvelopeStatusEnum = typeof IssueEnvelopeStatusEnum[keyof typeof IssueEnvelopeStatusEnum];


/**
 * Check if a given object implements the IssueEnvelope interface.
 */
export function instanceOfIssueEnvelope(value: object): value is IssueEnvelope {
    if (!('envelopeId' in value) || value['envelopeId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('submittedAt' in value) || value['submittedAt'] === undefined) return false;
    if (!('request' in value) || value['request'] === undefined) return false;
    return true;
}

export function IssueEnvelopeFromJSON(json: any): IssueEnvelope {
    return IssueEnvelopeFromJSONTyped(json, false);
}

export function IssueEnvelopeFromJSONTyped(json: any, ignoreDiscriminator: boolean): IssueEnvelope {
    if (json == null) {
        return json;
    }
    return {
        
        'envelopeId': json['envelopeId'],
        'status': json['status'],
        'submittedAt': (new Date(json['submittedAt'])),
        'request': IssueRequestFromJSON(json['request']),
    };
}

export function IssueEnvelopeToJSON(json: any): IssueEnvelope {
    return IssueEnvelopeToJSONTyped(json, false);
}

export function IssueEnvelopeToJSONTyped(value?: IssueEnvelope | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'envelopeId': value['envelopeId'],
        'status': value['status'],
        'submittedAt': ((value['submittedAt']).toISOString()),
        'request': IssueRequestToJSON(value['request']),
    };
}


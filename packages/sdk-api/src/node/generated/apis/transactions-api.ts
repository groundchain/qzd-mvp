/* tslint:disable */
/* eslint-disable */
/**
 * QZD Remittance API
 * The QZD Remittance API enables account management, digital asset issuance and redemption, and remittance operations with comprehensive observability and admin tooling. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration.js';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base.js';
// @ts-ignore
import type { IssueEnvelope } from '../models/index.js';
// @ts-ignore
import type { IssueRequest } from '../models/index.js';
// @ts-ignore
import type { ListAccountTransactions200Response } from '../models/index.js';
// @ts-ignore
import type { RedeemRequest } from '../models/index.js';
// @ts-ignore
import type { Transaction } from '../models/index.js';
// @ts-ignore
import type { TransferRequest } from '../models/index.js';
/**
 * TransactionsApi - axios parameter creator
 */
export const TransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Transfers are limited by the originating account\'s KYC tier. BASIC accounts may send up to Q5,000 per day while FULL accounts may send up to Q50,000 per day. Requests exceeding these thresholds will be rejected with a LIMIT_EXCEEDED error.
         * @summary Move balances between accounts.
         * @param {TransferRequest} transferRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateTransfer: async (transferRequest: TransferRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferRequest' is not null or undefined
            assertParamExists('initiateTransfer', 'transferRequest', transferRequest)
            const localVarPath = `/tx/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Issue new QZD tokens to an account.
         * @param {IssueRequest} issueRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueTokens: async (issueRequest: IssueRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueRequest' is not null or undefined
            assertParamExists('issueTokens', 'issueRequest', issueRequest)
            const localVarPath = `/tx/issue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(issueRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List transactions recorded for a specific account.
         * @param {string} id Unique account identifier.
         * @param {number} [limit] Maximum number of transactions to return.
         * @param {string} [cursor] Cursor token for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountTransactions: async (id: string, limit?: number, cursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listAccountTransactions', 'id', id)
            const localVarPath = `/accounts/{id}/transactions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Redeem QZD tokens for fiat settlement.
         * @param {RedeemRequest} redeemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemTokens: async (redeemRequest: RedeemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'redeemRequest' is not null or undefined
            assertParamExists('redeemTokens', 'redeemRequest', redeemRequest)
            const localVarPath = `/tx/redeem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(redeemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionsApi - functional programming interface
 */
export const TransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Transfers are limited by the originating account\'s KYC tier. BASIC accounts may send up to Q5,000 per day while FULL accounts may send up to Q50,000 per day. Requests exceeding these thresholds will be rejected with a LIMIT_EXCEEDED error.
         * @summary Move balances between accounts.
         * @param {TransferRequest} transferRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiateTransfer(transferRequest: TransferRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiateTransfer(transferRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.initiateTransfer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Issue new QZD tokens to an account.
         * @param {IssueRequest} issueRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async issueTokens(issueRequest: IssueRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssueEnvelope>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.issueTokens(issueRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.issueTokens']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List transactions recorded for a specific account.
         * @param {string} id Unique account identifier.
         * @param {number} [limit] Maximum number of transactions to return.
         * @param {string} [cursor] Cursor token for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountTransactions(id: string, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAccountTransactions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccountTransactions(id, limit, cursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.listAccountTransactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Redeem QZD tokens for fiat settlement.
         * @param {RedeemRequest} redeemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redeemTokens(redeemRequest: RedeemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemTokens(redeemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.redeemTokens']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TransactionsApi - factory interface
 */
export const TransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionsApiFp(configuration)
    return {
        /**
         * Transfers are limited by the originating account\'s KYC tier. BASIC accounts may send up to Q5,000 per day while FULL accounts may send up to Q50,000 per day. Requests exceeding these thresholds will be rejected with a LIMIT_EXCEEDED error.
         * @summary Move balances between accounts.
         * @param {TransactionsApiInitiateTransferRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateTransfer(requestParameters: TransactionsApiInitiateTransferRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transaction> {
            return localVarFp.initiateTransfer(requestParameters.transferRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Issue new QZD tokens to an account.
         * @param {TransactionsApiIssueTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueTokens(requestParameters: TransactionsApiIssueTokensRequest, options?: RawAxiosRequestConfig): AxiosPromise<IssueEnvelope> {
            return localVarFp.issueTokens(requestParameters.issueRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List transactions recorded for a specific account.
         * @param {TransactionsApiListAccountTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountTransactions(requestParameters: TransactionsApiListAccountTransactionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListAccountTransactions200Response> {
            return localVarFp.listAccountTransactions(requestParameters.id, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Redeem QZD tokens for fiat settlement.
         * @param {TransactionsApiRedeemTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemTokens(requestParameters: TransactionsApiRedeemTokensRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transaction> {
            return localVarFp.redeemTokens(requestParameters.redeemRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for initiateTransfer operation in TransactionsApi.
 */
export interface TransactionsApiInitiateTransferRequest {
    readonly transferRequest: TransferRequest
}

/**
 * Request parameters for issueTokens operation in TransactionsApi.
 */
export interface TransactionsApiIssueTokensRequest {
    readonly issueRequest: IssueRequest
}

/**
 * Request parameters for listAccountTransactions operation in TransactionsApi.
 */
export interface TransactionsApiListAccountTransactionsRequest {
    /**
     * Unique account identifier.
     */
    readonly id: string

    /**
     * Maximum number of transactions to return.
     */
    readonly limit?: number

    /**
     * Cursor token for pagination.
     */
    readonly cursor?: string
}

/**
 * Request parameters for redeemTokens operation in TransactionsApi.
 */
export interface TransactionsApiRedeemTokensRequest {
    readonly redeemRequest: RedeemRequest
}

/**
 * TransactionsApi - object-oriented interface
 */
export class TransactionsApi extends BaseAPI {
    /**
     * Transfers are limited by the originating account\'s KYC tier. BASIC accounts may send up to Q5,000 per day while FULL accounts may send up to Q50,000 per day. Requests exceeding these thresholds will be rejected with a LIMIT_EXCEEDED error.
     * @summary Move balances between accounts.
     * @param {TransactionsApiInitiateTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public initiateTransfer(requestParameters: TransactionsApiInitiateTransferRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).initiateTransfer(requestParameters.transferRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Issue new QZD tokens to an account.
     * @param {TransactionsApiIssueTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public issueTokens(requestParameters: TransactionsApiIssueTokensRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).issueTokens(requestParameters.issueRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List transactions recorded for a specific account.
     * @param {TransactionsApiListAccountTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAccountTransactions(requestParameters: TransactionsApiListAccountTransactionsRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).listAccountTransactions(requestParameters.id, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Redeem QZD tokens for fiat settlement.
     * @param {TransactionsApiRedeemTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public redeemTokens(requestParameters: TransactionsApiRedeemTokensRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).redeemTokens(requestParameters.redeemRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


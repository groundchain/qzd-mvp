/* tslint:disable */
/* eslint-disable */
/**
 * QZD Remittance API
 * The QZD Remittance API enables account management, digital asset issuance and redemption, and remittance operations with comprehensive observability and admin tooling. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration.js';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base.js';
// @ts-ignore
import type { Account } from '../models/index.js';
// @ts-ignore
import type { Balance } from '../models/index.js';
// @ts-ignore
import type { CreateAccountRequest } from '../models/index.js';
// @ts-ignore
import type { ListAccountTransactions200Response } from '../models/index.js';
// @ts-ignore
import type { UploadAccountKycRequest } from '../models/index.js';
/**
 * AccountsApi - axios parameter creator
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new remittance ledger account.
         * @param {CreateAccountRequest} createAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount: async (createAccountRequest: CreateAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAccountRequest' is not null or undefined
            assertParamExists('createAccount', 'createAccountRequest', createAccountRequest)
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the latest balance snapshot for an account.
         * @param {string} id Unique account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountBalance: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAccountBalance', 'id', id)
            const localVarPath = `/accounts/{id}/balance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List transactions recorded for a specific account.
         * @param {string} id Unique account identifier.
         * @param {number} [limit] Maximum number of transactions to return.
         * @param {string} [cursor] Cursor token for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountTransactions: async (id: string, limit?: number, cursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listAccountTransactions', 'id', id)
            const localVarPath = `/accounts/{id}/transactions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload new metadata, documents, or questionnaire answers to advance an account\'s KYC status. Approved submissions can upgrade the account to FULL status, unlocking higher daily transfer limits.
         * @summary Submit KYC evidence for an existing account.
         * @param {UploadAccountKycRequest} uploadAccountKycRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAccountKyc: async (uploadAccountKycRequest: UploadAccountKycRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadAccountKycRequest' is not null or undefined
            assertParamExists('uploadAccountKyc', 'uploadAccountKycRequest', uploadAccountKycRequest)
            const localVarPath = `/accounts/kyc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadAccountKycRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new remittance ledger account.
         * @param {CreateAccountRequest} createAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccount(createAccountRequest: CreateAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccount(createAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.createAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the latest balance snapshot for an account.
         * @param {string} id Unique account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountBalance(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Balance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountBalance(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.getAccountBalance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List transactions recorded for a specific account.
         * @param {string} id Unique account identifier.
         * @param {number} [limit] Maximum number of transactions to return.
         * @param {string} [cursor] Cursor token for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccountTransactions(id: string, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAccountTransactions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccountTransactions(id, limit, cursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.listAccountTransactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload new metadata, documents, or questionnaire answers to advance an account\'s KYC status. Approved submissions can upgrade the account to FULL status, unlocking higher daily transfer limits.
         * @summary Submit KYC evidence for an existing account.
         * @param {UploadAccountKycRequest} uploadAccountKycRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadAccountKyc(uploadAccountKycRequest: UploadAccountKycRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadAccountKyc(uploadAccountKycRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.uploadAccountKyc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountsApi - factory interface
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new remittance ledger account.
         * @param {AccountsApiCreateAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccount(requestParameters: AccountsApiCreateAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.createAccount(requestParameters.createAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the latest balance snapshot for an account.
         * @param {AccountsApiGetAccountBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountBalance(requestParameters: AccountsApiGetAccountBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Balance> {
            return localVarFp.getAccountBalance(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List transactions recorded for a specific account.
         * @param {AccountsApiListAccountTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccountTransactions(requestParameters: AccountsApiListAccountTransactionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListAccountTransactions200Response> {
            return localVarFp.listAccountTransactions(requestParameters.id, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload new metadata, documents, or questionnaire answers to advance an account\'s KYC status. Approved submissions can upgrade the account to FULL status, unlocking higher daily transfer limits.
         * @summary Submit KYC evidence for an existing account.
         * @param {AccountsApiUploadAccountKycRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAccountKyc(requestParameters: AccountsApiUploadAccountKycRequest, options?: RawAxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.uploadAccountKyc(requestParameters.uploadAccountKycRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAccount operation in AccountsApi.
 */
export interface AccountsApiCreateAccountRequest {
    readonly createAccountRequest: CreateAccountRequest
}

/**
 * Request parameters for getAccountBalance operation in AccountsApi.
 */
export interface AccountsApiGetAccountBalanceRequest {
    /**
     * Unique account identifier.
     */
    readonly id: string
}

/**
 * Request parameters for listAccountTransactions operation in AccountsApi.
 */
export interface AccountsApiListAccountTransactionsRequest {
    /**
     * Unique account identifier.
     */
    readonly id: string

    /**
     * Maximum number of transactions to return.
     */
    readonly limit?: number

    /**
     * Cursor token for pagination.
     */
    readonly cursor?: string
}

/**
 * Request parameters for uploadAccountKyc operation in AccountsApi.
 */
export interface AccountsApiUploadAccountKycRequest {
    readonly uploadAccountKycRequest: UploadAccountKycRequest
}

/**
 * AccountsApi - object-oriented interface
 */
export class AccountsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new remittance ledger account.
     * @param {AccountsApiCreateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createAccount(requestParameters: AccountsApiCreateAccountRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).createAccount(requestParameters.createAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the latest balance snapshot for an account.
     * @param {AccountsApiGetAccountBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getAccountBalance(requestParameters: AccountsApiGetAccountBalanceRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).getAccountBalance(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List transactions recorded for a specific account.
     * @param {AccountsApiListAccountTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listAccountTransactions(requestParameters: AccountsApiListAccountTransactionsRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).listAccountTransactions(requestParameters.id, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload new metadata, documents, or questionnaire answers to advance an account\'s KYC status. Approved submissions can upgrade the account to FULL status, unlocking higher daily transfer limits.
     * @summary Submit KYC evidence for an existing account.
     * @param {AccountsApiUploadAccountKycRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public uploadAccountKyc(requestParameters: AccountsApiUploadAccountKycRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).uploadAccountKyc(requestParameters.uploadAccountKycRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


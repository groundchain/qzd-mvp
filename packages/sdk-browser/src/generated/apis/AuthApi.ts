/* tslint:disable */
/* eslint-disable */
/**
 * QZD Remittance API
 * The QZD Remittance API enables account management, digital asset issuance and redemption, and remittance operations with comprehensive observability and admin tooling. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  LoginUser200Response,
  LoginUserRequest,
  RegisterUser201Response,
  RegisterUserRequest,
} from '../models/index.js';
import {
    LoginUser200ResponseFromJSON,
    LoginUser200ResponseToJSON,
    LoginUserRequestFromJSON,
    LoginUserRequestToJSON,
    RegisterUser201ResponseFromJSON,
    RegisterUser201ResponseToJSON,
    RegisterUserRequestFromJSON,
    RegisterUserRequestToJSON,
} from '../models/index.js';

export interface LoginUserOperationRequest {
    loginUserRequest: LoginUserRequest;
}

export interface RegisterUserOperationRequest {
    registerUserRequest: RegisterUserRequest;
}

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * 
     * @summary Authenticate an existing user and issue a JWT session token.
     * @param {LoginUserRequest} loginUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    loginUserRaw(requestParameters: LoginUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginUser200Response>>;

    /**
     * Authenticate an existing user and issue a JWT session token.
     */
    loginUser(requestParameters: LoginUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginUser200Response>;

    /**
     * 
     * @summary Register a new customer and provision an associated account.
     * @param {RegisterUserRequest} registerUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    registerUserRaw(requestParameters: RegisterUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterUser201Response>>;

    /**
     * Register a new customer and provision an associated account.
     */
    registerUser(requestParameters: RegisterUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterUser201Response>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     * Authenticate an existing user and issue a JWT session token.
     */
    async loginUserRaw(requestParameters: LoginUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginUser200Response>> {
        if (requestParameters['loginUserRequest'] == null) {
            throw new runtime.RequiredError(
                'loginUserRequest',
                'Required parameter "loginUserRequest" was null or undefined when calling loginUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginUserRequestToJSON(requestParameters['loginUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginUser200ResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate an existing user and issue a JWT session token.
     */
    async loginUser(requestParameters: LoginUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginUser200Response> {
        const response = await this.loginUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a new customer and provision an associated account.
     */
    async registerUserRaw(requestParameters: RegisterUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterUser201Response>> {
        if (requestParameters['registerUserRequest'] == null) {
            throw new runtime.RequiredError(
                'registerUserRequest',
                'Required parameter "registerUserRequest" was null or undefined when calling registerUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/register`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterUserRequestToJSON(requestParameters['registerUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterUser201ResponseFromJSON(jsonValue));
    }

    /**
     * Register a new customer and provision an associated account.
     */
    async registerUser(requestParameters: RegisterUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterUser201Response> {
        const response = await this.registerUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

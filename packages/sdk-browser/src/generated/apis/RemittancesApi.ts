/* tslint:disable */
/* eslint-disable */
/**
 * QZD Remittance API
 * The QZD Remittance API enables account management, digital asset issuance and redemption, and remittance operations with comprehensive observability and admin tooling. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  AcquireQZDForUSRemittance202Response,
  QuoteResponse,
  USRemitAcquireQZDRequest,
} from '../models/index.js';
import {
    AcquireQZDForUSRemittance202ResponseFromJSON,
    AcquireQZDForUSRemittance202ResponseToJSON,
    QuoteResponseFromJSON,
    QuoteResponseToJSON,
    USRemitAcquireQZDRequestFromJSON,
    USRemitAcquireQZDRequestToJSON,
} from '../models/index.js';

export interface AcquireQZDForUSRemittanceRequest {
    uSRemitAcquireQZDRequest: USRemitAcquireQZDRequest;
}

export interface SimulateQuoteRequest {
    sellCurrency: string;
    sellAmount: string;
    buyCurrency: string;
}

/**
 * RemittancesApi - interface
 * 
 * @export
 * @interface RemittancesApiInterface
 */
export interface RemittancesApiInterface {
    /**
     * 
     * @summary Initiate a US remittance flow that acquires QZD liquidity.
     * @param {USRemitAcquireQZDRequest} uSRemitAcquireQZDRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemittancesApiInterface
     */
    acquireQZDForUSRemittanceRaw(requestParameters: AcquireQZDForUSRemittanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AcquireQZDForUSRemittance202Response>>;

    /**
     * Initiate a US remittance flow that acquires QZD liquidity.
     */
    acquireQZDForUSRemittance(requestParameters: AcquireQZDForUSRemittanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AcquireQZDForUSRemittance202Response>;

    /**
     * 
     * @summary Simulate a quote for acquiring QZD against a fiat amount.
     * @param {string} sellCurrency 
     * @param {string} sellAmount 
     * @param {string} buyCurrency 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemittancesApiInterface
     */
    simulateQuoteRaw(requestParameters: SimulateQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteResponse>>;

    /**
     * Simulate a quote for acquiring QZD against a fiat amount.
     */
    simulateQuote(requestParameters: SimulateQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteResponse>;

}

/**
 * 
 */
export class RemittancesApi extends runtime.BaseAPI implements RemittancesApiInterface {

    /**
     * Initiate a US remittance flow that acquires QZD liquidity.
     */
    async acquireQZDForUSRemittanceRaw(requestParameters: AcquireQZDForUSRemittanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AcquireQZDForUSRemittance202Response>> {
        if (requestParameters['uSRemitAcquireQZDRequest'] == null) {
            throw new runtime.RequiredError(
                'uSRemitAcquireQZDRequest',
                'Required parameter "uSRemitAcquireQZDRequest" was null or undefined when calling acquireQZDForUSRemittance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/remit/us/acquire-qzd`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: USRemitAcquireQZDRequestToJSON(requestParameters['uSRemitAcquireQZDRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcquireQZDForUSRemittance202ResponseFromJSON(jsonValue));
    }

    /**
     * Initiate a US remittance flow that acquires QZD liquidity.
     */
    async acquireQZDForUSRemittance(requestParameters: AcquireQZDForUSRemittanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AcquireQZDForUSRemittance202Response> {
        const response = await this.acquireQZDForUSRemittanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Simulate a quote for acquiring QZD against a fiat amount.
     */
    async simulateQuoteRaw(requestParameters: SimulateQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteResponse>> {
        if (requestParameters['sellCurrency'] == null) {
            throw new runtime.RequiredError(
                'sellCurrency',
                'Required parameter "sellCurrency" was null or undefined when calling simulateQuote().'
            );
        }

        if (requestParameters['sellAmount'] == null) {
            throw new runtime.RequiredError(
                'sellAmount',
                'Required parameter "sellAmount" was null or undefined when calling simulateQuote().'
            );
        }

        if (requestParameters['buyCurrency'] == null) {
            throw new runtime.RequiredError(
                'buyCurrency',
                'Required parameter "buyCurrency" was null or undefined when calling simulateQuote().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sellCurrency'] != null) {
            queryParameters['sellCurrency'] = requestParameters['sellCurrency'];
        }

        if (requestParameters['sellAmount'] != null) {
            queryParameters['sellAmount'] = requestParameters['sellAmount'];
        }

        if (requestParameters['buyCurrency'] != null) {
            queryParameters['buyCurrency'] = requestParameters['buyCurrency'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/simulate/quote`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteResponseFromJSON(jsonValue));
    }

    /**
     * Simulate a quote for acquiring QZD against a fiat amount.
     */
    async simulateQuote(requestParameters: SimulateQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteResponse> {
        const response = await this.simulateQuoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

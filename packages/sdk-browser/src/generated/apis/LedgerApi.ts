/* tslint:disable */
/* eslint-disable */
/**
 * QZD Remittance API
 * The QZD Remittance API enables account management, digital asset issuance and redemption, and remittance operations with comprehensive observability and admin tooling. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  Balance,
  IssueEnvelope,
  IssueRequest,
  ListValidators200Response,
  RedeemRequest,
  Transaction,
} from '../models/index.js';
import {
    BalanceFromJSON,
    BalanceToJSON,
    IssueEnvelopeFromJSON,
    IssueEnvelopeToJSON,
    IssueRequestFromJSON,
    IssueRequestToJSON,
    ListValidators200ResponseFromJSON,
    ListValidators200ResponseToJSON,
    RedeemRequestFromJSON,
    RedeemRequestToJSON,
    TransactionFromJSON,
    TransactionToJSON,
} from '../models/index.js';

export interface GetAccountBalanceRequest {
    id: string;
}

export interface IssueTokensRequest {
    issueRequest: IssueRequest;
}

export interface RedeemTokensRequest {
    redeemRequest: RedeemRequest;
}

/**
 * LedgerApi - interface
 * 
 * @export
 * @interface LedgerApiInterface
 */
export interface LedgerApiInterface {
    /**
     * 
     * @summary Retrieve the latest balance snapshot for an account.
     * @param {string} id Unique account identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LedgerApiInterface
     */
    getAccountBalanceRaw(requestParameters: GetAccountBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Balance>>;

    /**
     * Retrieve the latest balance snapshot for an account.
     */
    getAccountBalance(requestParameters: GetAccountBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Balance>;

    /**
     * 
     * @summary Issue new QZD tokens to an account.
     * @param {IssueRequest} issueRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LedgerApiInterface
     */
    issueTokensRaw(requestParameters: IssueTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueEnvelope>>;

    /**
     * Issue new QZD tokens to an account.
     */
    issueTokens(requestParameters: IssueTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueEnvelope>;

    /**
     * 
     * @summary Retrieve the validator set that anchors the QZD network.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LedgerApiInterface
     */
    listValidatorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListValidators200Response>>;

    /**
     * Retrieve the validator set that anchors the QZD network.
     */
    listValidators(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListValidators200Response>;

    /**
     * 
     * @summary Redeem QZD tokens for fiat settlement.
     * @param {RedeemRequest} redeemRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LedgerApiInterface
     */
    redeemTokensRaw(requestParameters: RedeemTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>>;

    /**
     * Redeem QZD tokens for fiat settlement.
     */
    redeemTokens(requestParameters: RedeemTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction>;

}

/**
 * 
 */
export class LedgerApi extends runtime.BaseAPI implements LedgerApiInterface {

    /**
     * Retrieve the latest balance snapshot for an account.
     */
    async getAccountBalanceRaw(requestParameters: GetAccountBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Balance>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAccountBalance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/accounts/{id}/balance`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BalanceFromJSON(jsonValue));
    }

    /**
     * Retrieve the latest balance snapshot for an account.
     */
    async getAccountBalance(requestParameters: GetAccountBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Balance> {
        const response = await this.getAccountBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Issue new QZD tokens to an account.
     */
    async issueTokensRaw(requestParameters: IssueTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueEnvelope>> {
        if (requestParameters['issueRequest'] == null) {
            throw new runtime.RequiredError(
                'issueRequest',
                'Required parameter "issueRequest" was null or undefined when calling issueTokens().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/tx/issue`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IssueRequestToJSON(requestParameters['issueRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IssueEnvelopeFromJSON(jsonValue));
    }

    /**
     * Issue new QZD tokens to an account.
     */
    async issueTokens(requestParameters: IssueTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueEnvelope> {
        const response = await this.issueTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the validator set that anchors the QZD network.
     */
    async listValidatorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListValidators200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/validators`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListValidators200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the validator set that anchors the QZD network.
     */
    async listValidators(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListValidators200Response> {
        const response = await this.listValidatorsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Redeem QZD tokens for fiat settlement.
     */
    async redeemTokensRaw(requestParameters: RedeemTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>> {
        if (requestParameters['redeemRequest'] == null) {
            throw new runtime.RequiredError(
                'redeemRequest',
                'Required parameter "redeemRequest" was null or undefined when calling redeemTokens().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/tx/redeem`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedeemRequestToJSON(requestParameters['redeemRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionFromJSON(jsonValue));
    }

    /**
     * Redeem QZD tokens for fiat settlement.
     */
    async redeemTokens(requestParameters: RedeemTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction> {
        const response = await this.redeemTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

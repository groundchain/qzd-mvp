/* tslint:disable */
/* eslint-disable */
/**
 * QZD Remittance API
 * The QZD Remittance API enables account management, digital asset issuance and redemption, and remittance operations with comprehensive observability and admin tooling. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ListAdminAlerts200Response,
} from '../models/index.js';
import {
    ListAdminAlerts200ResponseFromJSON,
    ListAdminAlerts200ResponseToJSON,
} from '../models/index.js';

/**
 * AdminApi - interface
 * 
 * @export
 * @interface AdminApiInterface
 */
export interface AdminApiInterface {
    /**
     * 
     * @summary Retrieve open administrative alerts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    listAdminAlertsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListAdminAlerts200Response>>;

    /**
     * Retrieve open administrative alerts.
     */
    listAdminAlerts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListAdminAlerts200Response>;

}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI implements AdminApiInterface {

    /**
     * Retrieve open administrative alerts.
     */
    async listAdminAlertsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListAdminAlerts200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/alerts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListAdminAlerts200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve open administrative alerts.
     */
    async listAdminAlerts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListAdminAlerts200Response> {
        const response = await this.listAdminAlertsRaw(initOverrides);
        return await response.value();
    }

}

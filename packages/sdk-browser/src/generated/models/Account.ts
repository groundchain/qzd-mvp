/* tslint:disable */
/* eslint-disable */
/**
 * QZD Remittance API
 * The QZD Remittance API enables account management, digital asset issuance and redemption, and remittance operations with comprehensive observability and admin tooling. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    ownerId: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    ownerName?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    status: AccountStatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof Account
     */
    createdAt: Date;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Account
     */
    metadata?: { [key: string]: string; };
}


/**
 * @export
 */
export const AccountStatusEnum = {
    Active: 'active',
    Suspended: 'suspended',
    Closed: 'closed'
} as const;
export type AccountStatusEnum = typeof AccountStatusEnum[keyof typeof AccountStatusEnum];


/**
 * Check if a given object implements the Account interface.
 */
export function instanceOfAccount(value: object): value is Account {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('ownerId' in value) || value['ownerId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function AccountFromJSON(json: any): Account {
    return AccountFromJSONTyped(json, false);
}

export function AccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): Account {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'ownerId': json['ownerId'],
        'ownerName': json['ownerName'] == null ? undefined : json['ownerName'],
        'status': json['status'],
        'createdAt': (new Date(json['createdAt'])),
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
    };
}

export function AccountToJSON(json: any): Account {
    return AccountToJSONTyped(json, false);
}

export function AccountToJSONTyped(value?: Account | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'ownerId': value['ownerId'],
        'ownerName': value['ownerName'],
        'status': value['status'],
        'createdAt': ((value['createdAt']).toISOString()),
        'metadata': value['metadata'],
    };
}


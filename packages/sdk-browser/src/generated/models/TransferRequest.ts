/* tslint:disable */
/* eslint-disable */
/**
 * QZD Remittance API
 * The QZD Remittance API enables account management, digital asset issuance and redemption, and remittance operations with comprehensive observability and admin tooling. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { MonetaryAmount } from './MonetaryAmount.js';
import {
    MonetaryAmountFromJSON,
    MonetaryAmountFromJSONTyped,
    MonetaryAmountToJSON,
    MonetaryAmountToJSONTyped,
} from './MonetaryAmount.js';

/**
 * 
 * @export
 * @interface TransferRequest
 */
export interface TransferRequest {
    /**
     * 
     * @type {string}
     * @memberof TransferRequest
     */
    sourceAccountId: string;
    /**
     * 
     * @type {string}
     * @memberof TransferRequest
     */
    destinationAccountId: string;
    /**
     * 
     * @type {MonetaryAmount}
     * @memberof TransferRequest
     */
    amount: MonetaryAmount;
    /**
     * 
     * @type {string}
     * @memberof TransferRequest
     */
    memo?: string;
}

/**
 * Check if a given object implements the TransferRequest interface.
 */
export function instanceOfTransferRequest(value: object): value is TransferRequest {
    if (!('sourceAccountId' in value) || value['sourceAccountId'] === undefined) return false;
    if (!('destinationAccountId' in value) || value['destinationAccountId'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    return true;
}

export function TransferRequestFromJSON(json: any): TransferRequest {
    return TransferRequestFromJSONTyped(json, false);
}

export function TransferRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'sourceAccountId': json['sourceAccountId'],
        'destinationAccountId': json['destinationAccountId'],
        'amount': MonetaryAmountFromJSON(json['amount']),
        'memo': json['memo'] == null ? undefined : json['memo'],
    };
}

export function TransferRequestToJSON(json: any): TransferRequest {
    return TransferRequestToJSONTyped(json, false);
}

export function TransferRequestToJSONTyped(value?: TransferRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sourceAccountId': value['sourceAccountId'],
        'destinationAccountId': value['destinationAccountId'],
        'amount': MonetaryAmountToJSON(value['amount']),
        'memo': value['memo'],
    };
}


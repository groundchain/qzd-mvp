/* tslint:disable */
/* eslint-disable */
/**
 * QZD Remittance API
 * The QZD Remittance API enables account management, digital asset issuance and redemption, and remittance operations with comprehensive observability and admin tooling. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { MonetaryAmount } from './MonetaryAmount.js';
import {
    MonetaryAmountFromJSON,
    MonetaryAmountFromJSONTyped,
    MonetaryAmountToJSON,
    MonetaryAmountToJSONTyped,
} from './MonetaryAmount.js';

/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    accountId: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    counterpartyAccountId?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    type: TransactionTypeEnum;
    /**
     * 
     * @type {MonetaryAmount}
     * @memberof Transaction
     */
    amount: MonetaryAmount;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    status: TransactionStatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof Transaction
     */
    createdAt: Date;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Transaction
     */
    metadata?: { [key: string]: string; };
}


/**
 * @export
 */
export const TransactionTypeEnum = {
    Credit: 'credit',
    Debit: 'debit',
    Transfer: 'transfer',
    Issuance: 'issuance',
    Redemption: 'redemption'
} as const;
export type TransactionTypeEnum = typeof TransactionTypeEnum[keyof typeof TransactionTypeEnum];

/**
 * @export
 */
export const TransactionStatusEnum = {
    Pending: 'pending',
    Posted: 'posted',
    Failed: 'failed'
} as const;
export type TransactionStatusEnum = typeof TransactionStatusEnum[keyof typeof TransactionStatusEnum];


/**
 * Check if a given object implements the Transaction interface.
 */
export function instanceOfTransaction(value: object): value is Transaction {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('accountId' in value) || value['accountId'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function TransactionFromJSON(json: any): Transaction {
    return TransactionFromJSONTyped(json, false);
}

export function TransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Transaction {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'accountId': json['accountId'],
        'counterpartyAccountId': json['counterpartyAccountId'] == null ? undefined : json['counterpartyAccountId'],
        'type': json['type'],
        'amount': MonetaryAmountFromJSON(json['amount']),
        'status': json['status'],
        'createdAt': (new Date(json['createdAt'])),
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
    };
}

export function TransactionToJSON(json: any): Transaction {
    return TransactionToJSONTyped(json, false);
}

export function TransactionToJSONTyped(value?: Transaction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'accountId': value['accountId'],
        'counterpartyAccountId': value['counterpartyAccountId'],
        'type': value['type'],
        'amount': MonetaryAmountToJSON(value['amount']),
        'status': value['status'],
        'createdAt': ((value['createdAt']).toISOString()),
        'metadata': value['metadata'],
    };
}


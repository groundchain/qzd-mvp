/* tslint:disable */
/* eslint-disable */
/**
 * QZD Remittance API
 * The QZD Remittance API enables account management, digital asset issuance and redemption, and remittance operations with comprehensive observability and admin tooling. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration.js';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base.js';
// @ts-ignore
import type { Balance } from '../models/index.js';
// @ts-ignore
import type { IssueEnvelope } from '../models/index.js';
// @ts-ignore
import type { IssueRequest } from '../models/index.js';
// @ts-ignore
import type { ListValidators200Response } from '../models/index.js';
// @ts-ignore
import type { RedeemRequest } from '../models/index.js';
// @ts-ignore
import type { Transaction } from '../models/index.js';
/**
 * LedgerApi - axios parameter creator
 */
export const LedgerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve the latest balance snapshot for an account.
         * @param {string} id Unique account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountBalance: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAccountBalance', 'id', id)
            const localVarPath = `/accounts/{id}/balance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Issue new QZD tokens to an account.
         * @param {IssueRequest} issueRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueTokens: async (issueRequest: IssueRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueRequest' is not null or undefined
            assertParamExists('issueTokens', 'issueRequest', issueRequest)
            const localVarPath = `/tx/issue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(issueRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the validator set that anchors the QZD network.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listValidators: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/validators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Redeem QZD tokens for fiat settlement.
         * @param {RedeemRequest} redeemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemTokens: async (redeemRequest: RedeemRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'redeemRequest' is not null or undefined
            assertParamExists('redeemTokens', 'redeemRequest', redeemRequest)
            const localVarPath = `/tx/redeem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(redeemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LedgerApi - functional programming interface
 */
export const LedgerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LedgerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve the latest balance snapshot for an account.
         * @param {string} id Unique account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountBalance(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Balance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountBalance(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LedgerApi.getAccountBalance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Issue new QZD tokens to an account.
         * @param {IssueRequest} issueRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async issueTokens(issueRequest: IssueRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssueEnvelope>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.issueTokens(issueRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LedgerApi.issueTokens']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve the validator set that anchors the QZD network.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listValidators(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListValidators200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listValidators(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LedgerApi.listValidators']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Redeem QZD tokens for fiat settlement.
         * @param {RedeemRequest} redeemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redeemTokens(redeemRequest: RedeemRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemTokens(redeemRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LedgerApi.redeemTokens']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LedgerApi - factory interface
 */
export const LedgerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LedgerApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve the latest balance snapshot for an account.
         * @param {LedgerApiGetAccountBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountBalance(requestParameters: LedgerApiGetAccountBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Balance> {
            return localVarFp.getAccountBalance(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Issue new QZD tokens to an account.
         * @param {LedgerApiIssueTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueTokens(requestParameters: LedgerApiIssueTokensRequest, options?: RawAxiosRequestConfig): AxiosPromise<IssueEnvelope> {
            return localVarFp.issueTokens(requestParameters.issueRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the validator set that anchors the QZD network.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listValidators(options?: RawAxiosRequestConfig): AxiosPromise<ListValidators200Response> {
            return localVarFp.listValidators(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Redeem QZD tokens for fiat settlement.
         * @param {LedgerApiRedeemTokensRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemTokens(requestParameters: LedgerApiRedeemTokensRequest, options?: RawAxiosRequestConfig): AxiosPromise<Transaction> {
            return localVarFp.redeemTokens(requestParameters.redeemRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAccountBalance operation in LedgerApi.
 */
export interface LedgerApiGetAccountBalanceRequest {
    /**
     * Unique account identifier.
     */
    readonly id: string
}

/**
 * Request parameters for issueTokens operation in LedgerApi.
 */
export interface LedgerApiIssueTokensRequest {
    readonly issueRequest: IssueRequest
}

/**
 * Request parameters for redeemTokens operation in LedgerApi.
 */
export interface LedgerApiRedeemTokensRequest {
    readonly redeemRequest: RedeemRequest
}

/**
 * LedgerApi - object-oriented interface
 */
export class LedgerApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve the latest balance snapshot for an account.
     * @param {LedgerApiGetAccountBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getAccountBalance(requestParameters: LedgerApiGetAccountBalanceRequest, options?: RawAxiosRequestConfig) {
        return LedgerApiFp(this.configuration).getAccountBalance(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Issue new QZD tokens to an account.
     * @param {LedgerApiIssueTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public issueTokens(requestParameters: LedgerApiIssueTokensRequest, options?: RawAxiosRequestConfig) {
        return LedgerApiFp(this.configuration).issueTokens(requestParameters.issueRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the validator set that anchors the QZD network.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listValidators(options?: RawAxiosRequestConfig) {
        return LedgerApiFp(this.configuration).listValidators(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Redeem QZD tokens for fiat settlement.
     * @param {LedgerApiRedeemTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public redeemTokens(requestParameters: LedgerApiRedeemTokensRequest, options?: RawAxiosRequestConfig) {
        return LedgerApiFp(this.configuration).redeemTokens(requestParameters.redeemRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


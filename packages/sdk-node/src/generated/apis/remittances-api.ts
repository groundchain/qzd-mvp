/* tslint:disable */
/* eslint-disable */
/**
 * QZD Remittance API
 * The QZD Remittance API enables account management, digital asset issuance and redemption, and remittance operations with comprehensive observability and admin tooling. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration.js';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common.js';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base.js';
// @ts-ignore
import type { AcquireQZDForUSRemittance202Response } from '../models/index.js';
// @ts-ignore
import type { QuoteResponse } from '../models/index.js';
// @ts-ignore
import type { USRemitAcquireQZDRequest } from '../models/index.js';
/**
 * RemittancesApi - axios parameter creator
 */
export const RemittancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Initiate a US remittance flow that acquires QZD liquidity.
         * @param {USRemitAcquireQZDRequest} uSRemitAcquireQZDRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acquireQZDForUSRemittance: async (uSRemitAcquireQZDRequest: USRemitAcquireQZDRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uSRemitAcquireQZDRequest' is not null or undefined
            assertParamExists('acquireQZDForUSRemittance', 'uSRemitAcquireQZDRequest', uSRemitAcquireQZDRequest)
            const localVarPath = `/remit/us/acquire-qzd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uSRemitAcquireQZDRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Simulate a quote for acquiring QZD against a fiat amount.
         * @param {string} sellCurrency 
         * @param {string} sellAmount 
         * @param {string} buyCurrency 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulateQuote: async (sellCurrency: string, sellAmount: string, buyCurrency: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellCurrency' is not null or undefined
            assertParamExists('simulateQuote', 'sellCurrency', sellCurrency)
            // verify required parameter 'sellAmount' is not null or undefined
            assertParamExists('simulateQuote', 'sellAmount', sellAmount)
            // verify required parameter 'buyCurrency' is not null or undefined
            assertParamExists('simulateQuote', 'buyCurrency', buyCurrency)
            const localVarPath = `/simulate/quote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sellCurrency !== undefined) {
                localVarQueryParameter['sellCurrency'] = sellCurrency;
            }

            if (sellAmount !== undefined) {
                localVarQueryParameter['sellAmount'] = sellAmount;
            }

            if (buyCurrency !== undefined) {
                localVarQueryParameter['buyCurrency'] = buyCurrency;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RemittancesApi - functional programming interface
 */
export const RemittancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RemittancesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Initiate a US remittance flow that acquires QZD liquidity.
         * @param {USRemitAcquireQZDRequest} uSRemitAcquireQZDRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acquireQZDForUSRemittance(uSRemitAcquireQZDRequest: USRemitAcquireQZDRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AcquireQZDForUSRemittance202Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acquireQZDForUSRemittance(uSRemitAcquireQZDRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemittancesApi.acquireQZDForUSRemittance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Simulate a quote for acquiring QZD against a fiat amount.
         * @param {string} sellCurrency 
         * @param {string} sellAmount 
         * @param {string} buyCurrency 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async simulateQuote(sellCurrency: string, sellAmount: string, buyCurrency: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.simulateQuote(sellCurrency, sellAmount, buyCurrency, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemittancesApi.simulateQuote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RemittancesApi - factory interface
 */
export const RemittancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RemittancesApiFp(configuration)
    return {
        /**
         * 
         * @summary Initiate a US remittance flow that acquires QZD liquidity.
         * @param {RemittancesApiAcquireQZDForUSRemittanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acquireQZDForUSRemittance(requestParameters: RemittancesApiAcquireQZDForUSRemittanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<AcquireQZDForUSRemittance202Response> {
            return localVarFp.acquireQZDForUSRemittance(requestParameters.uSRemitAcquireQZDRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Simulate a quote for acquiring QZD against a fiat amount.
         * @param {RemittancesApiSimulateQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulateQuote(requestParameters: RemittancesApiSimulateQuoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<QuoteResponse> {
            return localVarFp.simulateQuote(requestParameters.sellCurrency, requestParameters.sellAmount, requestParameters.buyCurrency, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for acquireQZDForUSRemittance operation in RemittancesApi.
 */
export interface RemittancesApiAcquireQZDForUSRemittanceRequest {
    readonly uSRemitAcquireQZDRequest: USRemitAcquireQZDRequest
}

/**
 * Request parameters for simulateQuote operation in RemittancesApi.
 */
export interface RemittancesApiSimulateQuoteRequest {
    readonly sellCurrency: string

    readonly sellAmount: string

    readonly buyCurrency: string
}

/**
 * RemittancesApi - object-oriented interface
 */
export class RemittancesApi extends BaseAPI {
    /**
     * 
     * @summary Initiate a US remittance flow that acquires QZD liquidity.
     * @param {RemittancesApiAcquireQZDForUSRemittanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public acquireQZDForUSRemittance(requestParameters: RemittancesApiAcquireQZDForUSRemittanceRequest, options?: RawAxiosRequestConfig) {
        return RemittancesApiFp(this.configuration).acquireQZDForUSRemittance(requestParameters.uSRemitAcquireQZDRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Simulate a quote for acquiring QZD against a fiat amount.
     * @param {RemittancesApiSimulateQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public simulateQuote(requestParameters: RemittancesApiSimulateQuoteRequest, options?: RawAxiosRequestConfig) {
        return RemittancesApiFp(this.configuration).simulateQuote(requestParameters.sellCurrency, requestParameters.sellAmount, requestParameters.buyCurrency, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new customer and provision an associated account. */
        post: operations["registerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authenticate an existing user and issue a JWT session token. */
        post: operations["loginUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new remittance ledger account. */
        post: operations["createAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/kyc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit KYC evidence for an existing account.
         * @description Upload new metadata, documents, or questionnaire answers to advance an account's KYC status. Approved submissions can upgrade the account to FULL status, unlocking higher daily transfer limits.
         */
        post: operations["uploadAccountKyc"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{id}/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the latest balance snapshot for an account. */
        get: operations["getAccountBalance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{id}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List transactions recorded for a specific account. */
        get: operations["listAccountTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tx/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Move balances between accounts.
         * @description Transfers are limited by the originating account's KYC tier. BASIC accounts may send up to Q5,000 per day while FULL accounts may send up to Q50,000 per day. Requests exceeding these thresholds will be rejected with a LIMIT_EXCEEDED error.
         */
        post: operations["initiateTransfer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tx/issue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Execute an approved issuance request and credit the beneficiary account. */
        post: operations["issueTokens"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tx/redeem": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Redeem QZD tokens for fiat settlement. */
        post: operations["redeemTokens"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agents/cashin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accept cash-in from an agent and credit their QZD balance. */
        post: operations["agentCashIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agents/cashout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Convert QZD balance into a voucher code for payout. */
        post: operations["agentCashOut"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agents/vouchers/{code}/redeem": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Redeem an issued voucher code and finalize payout. */
        post: operations["redeemVoucher"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/remit/us/acquire-qzd": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Initiate a US remittance flow that acquires QZD liquidity. */
        post: operations["acquireQZDForUSRemittance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/simulate/quote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Simulate a quote for acquiring QZD against a fiat amount. */
        get: operations["simulateQuote"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/validators": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the validator set that anchors the QZD network. */
        get: operations["listValidators"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve open administrative alerts. */
        get: operations["listAdminAlerts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/alerts/{id}/ack": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Acknowledge and clear an administrative alert. */
        post: operations["acknowledgeAdminAlert"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/issuance-requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List issuance requests awaiting validator review. */
        get: operations["listIssuanceRequests"];
        put?: never;
        /** Submit a new issuance request to the validator queue. */
        post: operations["createIssuanceRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/issuance-requests/{id}/sign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Record a validator signature for the issuance request. */
        post: operations["signIssuanceRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Liveness probe endpoint. */
        get: operations["getLiveness"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Readiness probe endpoint. */
        get: operations["getReadiness"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sms/inbound": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Forward an inbound SMS command for processing. */
        post: operations["receiveSmsInbound"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        MonetaryAmount: {
            currency: string;
            value: string;
        };
        Account: {
            id: string;
            ownerId: string;
            ownerName?: string;
            /**
             * @description Current account state. Frozen accounts are blocked from initiating transfers until reactivated.
             * @enum {string}
             */
            status: "ACTIVE" | "FROZEN";
            /**
             * @description Know Your Customer (KYC) tier that controls daily transfer limits. BASIC accounts may move up to Q5,000 per day while FULL accounts may transfer up to Q50,000 per day.
             * @enum {string}
             */
            kycLevel: "BASIC" | "FULL";
            /** Format: date-time */
            createdAt: string;
            metadata?: {
                [key: string]: string;
            };
        };
        UploadAccountKycRequest: {
            accountId: string;
            /** @enum {string} */
            kycLevel: "BASIC" | "FULL";
            /** @description Structured evidence payload such as document references. */
            metadata: {
                [key: string]: string;
            };
        };
        Balance: {
            accountId: string;
            currency: string;
            available: components["schemas"]["MonetaryAmount"];
            total: components["schemas"]["MonetaryAmount"];
            /** Format: date-time */
            updatedAt: string;
        };
        Transaction: {
            id: string;
            accountId: string;
            counterpartyAccountId?: string;
            /** @enum {string} */
            type: "credit" | "debit" | "transfer" | "issuance" | "redemption";
            amount: components["schemas"]["MonetaryAmount"];
            /** @enum {string} */
            status: "pending" | "posted" | "failed";
            /** Format: date-time */
            createdAt: string;
            metadata?: {
                [key: string]: string;
            };
        };
        /** @description Transfer instructions count toward an account's daily movement limit. BASIC accounts may submit no more than Q5,000 per 24-hour window while FULL accounts may transfer up to Q50,000. */
        TransferRequest: {
            sourceAccountId: string;
            destinationAccountId: string;
            amount: components["schemas"]["MonetaryAmount"];
            memo?: string;
        };
        AgentCashInRequest: {
            accountId: string;
            amount: components["schemas"]["MonetaryAmount"];
            /** @description Optional note describing the cash-in event. */
            memo?: string;
        };
        AgentCashOutRequest: {
            accountId: string;
            amount: components["schemas"]["MonetaryAmount"];
            /** @description Optional note describing the disbursement. */
            memo?: string;
        };
        IssueRequest: {
            accountId: string;
            amount: components["schemas"]["MonetaryAmount"];
            reference?: string;
        };
        IssueEnvelope: {
            envelopeId: string;
            /** @enum {string} */
            status: "pending" | "completed" | "failed";
            /** Format: date-time */
            submittedAt: string;
            request: components["schemas"]["IssueRequest"];
        };
        /** @description Track validator approvals for a queued issuance. */
        IssuanceRequest: {
            id: string;
            accountId: string;
            amount?: components["schemas"]["MonetaryAmount"];
            /**
             * Format: int32
             * @description Number of validator signatures required for approval.
             */
            required?: number;
            /**
             * Format: int32
             * @description Number of validator signatures collected so far.
             */
            collected?: number;
            /** @enum {string} */
            status?: "pending" | "collecting" | "ready" | "completed";
        };
        Voucher: {
            code: string;
            accountId: string;
            amount: components["schemas"]["MonetaryAmount"];
            fee: components["schemas"]["MonetaryAmount"];
            totalDebited: components["schemas"]["MonetaryAmount"];
            /** @enum {string} */
            status: "issued" | "redeemed";
            /** Format: date-time */
            createdAt: string;
            /**
             * Format: date-time
             * @description Timestamp when the voucher was redeemed.
             */
            redeemedAt?: string;
            /** @description Additional context captured during issuance or redemption. */
            metadata?: {
                [key: string]: string;
            };
        };
        RedeemRequest: {
            accountId: string;
            amount: components["schemas"]["MonetaryAmount"];
            destinationBankAccount: {
                bankName: string;
                routingNumber: string;
                accountNumber: string;
            };
        };
        USRemitAcquireQZDRequest: {
            usdAmount: components["schemas"]["MonetaryAmount"];
            /** @description MSISDN of the sender initiating the remittance. */
            senderPhone: string;
            /** @description Beneficiary account identifier if known. */
            receiverAccountId?: string;
            /** @description Beneficiary phone number when an account identifier is unavailable. */
            receiverPhone?: string;
            /** @description Optional pricing program override for this acquisition. */
            scenario?: components["schemas"]["QuoteScenario"];
        };
        QuoteResponse: {
            quoteId: string;
            sellAmount: components["schemas"]["MonetaryAmount"];
            buyAmount: components["schemas"]["MonetaryAmount"];
            rate: string;
            /** Format: date-time */
            expiresAt: string;
        };
        Validator: {
            id: string;
            name: string;
            status: string;
            /** Format: uri */
            endpoint: string;
        };
        Alert: {
            id: string;
            /** @enum {string} */
            severity: "low" | "medium" | "high";
            rule: string;
            /** Format: date-time */
            ts: string;
            details?: {
                [key: string]: unknown;
            };
        };
        /** @description Inbound SMS payload forwarded from the messaging gateway. */
        SmsInboundRequest: {
            /** @description MSISDN of the sender initiating the command. */
            from: string;
            /** @description Body of the received SMS message. */
            text: string;
        };
        /** @description Response payload containing the SMS reply text. */
        SmsInboundResponse: {
            /** @description Text that should be sent back to the sender. */
            reply: string;
        };
        Error: {
            /** @enum {string} */
            code: "BAD_REQUEST" | "UNAUTHORIZED" | "FORBIDDEN" | "NOT_FOUND" | "CONFLICT" | "TOO_MANY_REQUESTS" | "INTERNAL_ERROR" | "SERVICE_UNAVAILABLE" | "LIMIT_EXCEEDED" | "ACCOUNT_FROZEN" | "INVALID_SIGNATURE" | "REPLAY_DETECTED";
            message: string;
            details?: {
                [key: string]: string;
            };
        };
        /**
         * @description Pricing program applied to a remittance quote.
         * @enum {string}
         */
        QuoteScenario: "DEFAULT" | "TARIFFED" | "SUBSIDIZED";
    };
    responses: {
        /** @description Invalid request payload or parameters. */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "BAD_REQUEST",
                 *       "message": "The provided payload failed validation."
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Authentication credentials are missing or invalid. */
        UnauthorizedError: {
            headers: {
                /** @description Authentication challenge. */
                "WWW-Authenticate"?: string;
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "UNAUTHORIZED",
                 *       "message": "Bearer token is invalid or expired."
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description The authenticated principal lacks required permissions. */
        ForbiddenError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "FORBIDDEN",
                 *       "message": "You do not have access to this resource."
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description The requested resource was not found. */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "NOT_FOUND",
                 *       "message": "Account acc_987654321 was not found."
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description The request conflicts with the current state of the resource. */
        ConflictError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "CONFLICT",
                 *       "message": "Transfer is already in progress."
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Rate limit exceeded. */
        TooManyRequestsError: {
            headers: {
                /** @description Suggested wait time before retrying the request in seconds. */
                "Retry-After"?: number;
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "TOO_MANY_REQUESTS",
                 *       "message": "Rate limit exceeded."
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unexpected server error occurred. */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "INTERNAL_ERROR",
                 *       "message": "An unexpected error occurred."
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        /** @description Unique account identifier. */
        AccountIdPath: string;
        /** @description Unique key to guarantee idempotent handling of POST requests. */
        IdempotencyKeyHeader: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    registerUser: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key to guarantee idempotent handling of POST requests. */
                "Idempotency-Key": components["parameters"]["IdempotencyKeyHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "alex.merchant@example.com",
                 *       "password": "Sup3rS3cret!",
                 *       "fullName": "Alex Merchant"
                 *     } */
                "application/json": {
                    /** Format: email */
                    email: string;
                    /** Format: password */
                    password: string;
                    fullName: string;
                };
            };
        };
        responses: {
            /** @description Registration successful. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "userId": "usr_123456789",
                     *       "account": {
                     *         "ownerId": "usr_123456789",
                     *         "id": "acc_987654321",
                     *         "ownerName": "Alex Merchant",
                     *         "status": "ACTIVE",
                     *         "kycLevel": "BASIC",
                     *         "createdAt": "2024-05-01T12:30:00Z"
                     *       },
                     *       "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                     *     } */
                    "application/json": {
                        userId?: string;
                        account?: components["schemas"]["Account"];
                        /** @description Session token for the newly created user. */
                        token?: string;
                    };
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            409: components["responses"]["ConflictError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    loginUser: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key to guarantee idempotent handling of POST requests. */
                "Idempotency-Key": components["parameters"]["IdempotencyKeyHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "alex.merchant@example.com",
                 *       "password": "Sup3rS3cret!"
                 *     } */
                "application/json": {
                    /** Format: email */
                    email: string;
                    /** Format: password */
                    password: string;
                };
            };
        };
        responses: {
            /** @description Login successful. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                     *       "expiresIn": 3600
                     *     } */
                    "application/json": {
                        token?: string;
                        /**
                         * Format: int64
                         * @description Token expiration time in seconds.
                         */
                        expiresIn?: number;
                    };
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createAccount: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key to guarantee idempotent handling of POST requests. */
                "Idempotency-Key": components["parameters"]["IdempotencyKeyHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "ownerId": "usr_123456789",
                 *       "displayName": "Northbridge Holdings USD Account",
                 *       "metadata": {
                 *         "region": "US"
                 *       }
                 *     } */
                "application/json": {
                    ownerId: string;
                    displayName?: string;
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Account created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "acc_987654321",
                     *       "ownerId": "usr_123456789",
                     *       "ownerName": "Northbridge Holdings",
                     *       "status": "ACTIVE",
                     *       "kycLevel": "BASIC",
                     *       "createdAt": "2024-05-01T12:30:00Z"
                     *     } */
                    "application/json": components["schemas"]["Account"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            409: components["responses"]["ConflictError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    uploadAccountKyc: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key to guarantee idempotent handling of POST requests. */
                "Idempotency-Key": components["parameters"]["IdempotencyKeyHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "accountId": "acc_987654321",
                 *       "kycLevel": "FULL",
                 *       "metadata": {
                 *         "documentType": "PASSPORT",
                 *         "documentNumber": "123456789"
                 *       }
                 *     } */
                "application/json": components["schemas"]["UploadAccountKycRequest"];
            };
        };
        responses: {
            /** @description Account KYC metadata accepted and account updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            409: components["responses"]["ConflictError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getAccountBalance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique account identifier. */
                id: components["parameters"]["AccountIdPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account balance retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "accountId": "acc_987654321",
                     *       "currency": "USD",
                     *       "available": {
                     *         "currency": "USD",
                     *         "value": "12500.42"
                     *       },
                     *       "total": {
                     *         "currency": "USD",
                     *         "value": "13500.42"
                     *       },
                     *       "updatedAt": "2024-05-02T08:15:00Z"
                     *     } */
                    "application/json": components["schemas"]["Balance"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listAccountTransactions: {
        parameters: {
            query?: {
                /**
                 * @description Maximum number of transactions to return.
                 * @example 50
                 */
                limit?: number;
                /** @description Cursor token for pagination. */
                cursor?: string;
            };
            header?: never;
            path: {
                /** @description Unique account identifier. */
                id: components["parameters"]["AccountIdPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Transactions retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "items": [
                     *         {
                     *           "id": "txn_001",
                     *           "accountId": "acc_987654321",
                     *           "type": "credit",
                     *           "amount": {
                     *             "currency": "USD",
                     *             "value": "500.00"
                     *           },
                     *           "status": "posted",
                     *           "createdAt": "2024-05-02T09:00:00Z"
                     *         },
                     *         {
                     *           "id": "txn_002",
                     *           "accountId": "acc_987654321",
                     *           "type": "debit",
                     *           "amount": {
                     *             "currency": "USD",
                     *             "value": "125.00"
                     *           },
                     *           "status": "pending",
                     *           "createdAt": "2024-05-02T10:45:00Z"
                     *         }
                     *       ],
                     *       "nextCursor": null
                     *     } */
                    "application/json": {
                        items?: components["schemas"]["Transaction"][];
                        nextCursor?: string | null;
                    };
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    initiateTransfer: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key to guarantee idempotent handling of POST requests. */
                "Idempotency-Key": components["parameters"]["IdempotencyKeyHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "sourceAccountId": "acc_123",
                 *       "destinationAccountId": "acc_987654321",
                 *       "amount": {
                 *         "currency": "USD",
                 *         "value": "250.00"
                 *       },
                 *       "memo": "Vendor settlement"
                 *     } */
                "application/json": components["schemas"]["TransferRequest"];
            };
        };
        responses: {
            /** @description Transfer accepted for processing. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "txn_103",
                     *       "accountId": "acc_123",
                     *       "counterpartyAccountId": "acc_987654321",
                     *       "type": "transfer",
                     *       "amount": {
                     *         "currency": "USD",
                     *         "value": "250.00"
                     *       },
                     *       "status": "pending",
                     *       "createdAt": "2024-05-02T11:00:00Z"
                     *     } */
                    "application/json": components["schemas"]["Transaction"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            409: components["responses"]["ConflictError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    issueTokens: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key to guarantee idempotent handling of POST requests. */
                "Idempotency-Key": components["parameters"]["IdempotencyKeyHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "requestId": "ir_000001"
                 *     } */
                "application/json": {
                    /** @description Identifier of the approved issuance request. */
                    requestId: string;
                };
            };
        };
        responses: {
            /** @description Issuance executed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "txn_issuance_001",
                     *       "accountId": "acc_987654321",
                     *       "type": "issuance",
                     *       "amount": {
                     *         "currency": "QZD",
                     *         "value": "1000"
                     *       },
                     *       "status": "posted",
                     *       "createdAt": "2024-05-02T11:15:00Z"
                     *     } */
                    "application/json": components["schemas"]["Transaction"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            409: components["responses"]["ConflictError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    redeemTokens: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key to guarantee idempotent handling of POST requests. */
                "Idempotency-Key": components["parameters"]["IdempotencyKeyHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "accountId": "acc_987654321",
                 *       "amount": {
                 *         "currency": "QZD",
                 *         "value": "500"
                 *       },
                 *       "destinationBankAccount": {
                 *         "bankName": "First Cooperative Bank",
                 *         "routingNumber": "021000021",
                 *         "accountNumber": "0987654321"
                 *       }
                 *     } */
                "application/json": components["schemas"]["RedeemRequest"];
            };
        };
        responses: {
            /** @description Redemption request accepted. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "txn_red_001",
                     *       "accountId": "acc_987654321",
                     *       "type": "redemption",
                     *       "amount": {
                     *         "currency": "QZD",
                     *         "value": "500"
                     *       },
                     *       "status": "pending",
                     *       "createdAt": "2024-05-02T11:30:00Z"
                     *     } */
                    "application/json": components["schemas"]["Transaction"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            409: components["responses"]["ConflictError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    agentCashIn: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key to guarantee idempotent handling of POST requests. */
                "Idempotency-Key": components["parameters"]["IdempotencyKeyHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "accountId": "acc_987654321",
                 *       "amount": {
                 *         "currency": "QZD",
                 *         "value": "250.00"
                 *       },
                 *       "memo": "Float top-up"
                 *     } */
                "application/json": components["schemas"]["AgentCashInRequest"];
            };
        };
        responses: {
            /** @description Cash-in recorded successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "txn_cash_in_001",
                     *       "accountId": "acc_987654321",
                     *       "type": "credit",
                     *       "amount": {
                     *         "currency": "QZD",
                     *         "value": "250.00"
                     *       },
                     *       "status": "posted",
                     *       "createdAt": "2024-05-02T12:00:00Z",
                     *       "metadata": {
                     *         "memo": "Float top-up"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["Transaction"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    agentCashOut: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key to guarantee idempotent handling of POST requests. */
                "Idempotency-Key": components["parameters"]["IdempotencyKeyHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "accountId": "acc_987654321",
                 *       "amount": {
                 *         "currency": "QZD",
                 *         "value": "100.00"
                 *       },
                 *       "memo": "Branch disbursement"
                 *     } */
                "application/json": components["schemas"]["AgentCashOutRequest"];
            };
        };
        responses: {
            /** @description Voucher issued for cash out. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": "vch_000123",
                     *       "accountId": "acc_987654321",
                     *       "amount": {
                     *         "currency": "QZD",
                     *         "value": "100.00"
                     *       },
                     *       "fee": {
                     *         "currency": "QZD",
                     *         "value": "0.50"
                     *       },
                     *       "totalDebited": {
                     *         "currency": "QZD",
                     *         "value": "100.50"
                     *       },
                     *       "status": "issued",
                     *       "createdAt": "2024-05-02T12:05:00Z"
                     *     } */
                    "application/json": components["schemas"]["Voucher"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            409: components["responses"]["ConflictError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    redeemVoucher: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key to guarantee idempotent handling of POST requests. */
                "Idempotency-Key": components["parameters"]["IdempotencyKeyHeader"];
            };
            path: {
                /** @description Voucher code issued during agent cash-out. */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Voucher redeemed successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": "vch_000123",
                     *       "accountId": "acc_987654321",
                     *       "amount": {
                     *         "currency": "QZD",
                     *         "value": "100.00"
                     *       },
                     *       "fee": {
                     *         "currency": "QZD",
                     *         "value": "0.50"
                     *       },
                     *       "totalDebited": {
                     *         "currency": "QZD",
                     *         "value": "100.50"
                     *       },
                     *       "status": "redeemed",
                     *       "createdAt": "2024-05-02T12:05:00Z",
                     *       "redeemedAt": "2024-05-02T12:15:00Z"
                     *     } */
                    "application/json": components["schemas"]["Voucher"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            409: components["responses"]["ConflictError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    acquireQZDForUSRemittance: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key to guarantee idempotent handling of POST requests. */
                "Idempotency-Key": components["parameters"]["IdempotencyKeyHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "usdAmount": {
                 *         "currency": "USD",
                 *         "value": "125.00"
                 *       },
                 *       "senderPhone": "+14155551212",
                 *       "receiverAccountId": "acc_beneficiary_001"
                 *     } */
                "application/json": components["schemas"]["USRemitAcquireQZDRequest"];
            };
        };
        responses: {
            /** @description QZD issued to the beneficiary account. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "txn_issuance_001",
                     *       "accountId": "acc_beneficiary_001",
                     *       "type": "issuance",
                     *       "amount": {
                     *         "currency": "QZD",
                     *         "value": "965.51"
                     *       },
                     *       "status": "posted",
                     *       "createdAt": "2024-05-02T11:40:00Z"
                     *     } */
                    "application/json": components["schemas"]["Transaction"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            409: components["responses"]["ConflictError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    simulateQuote: {
        parameters: {
            query: {
                /** @example 100.00 */
                usdAmount: string;
                /** @description Pricing program to apply to the remittance quote. Allowed values: DEFAULT,
                 *     TARIFFED, SUBSIDIZED.
                 *      */
                scenario?: components["schemas"]["QuoteScenario"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Quote simulated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuoteResponse"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listValidators: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Validator list retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "validators": [
                     *         {
                     *           "id": "val_001",
                     *           "name": "QZD Northern Node",
                     *           "status": "ACTIVE",
                     *           "kycLevel": "FULL",
                     *           "endpoint": "https://validator1.qzd.example.com"
                     *         },
                     *         {
                     *           "id": "val_002",
                     *           "name": "QZD Southern Node",
                     *           "status": "standby",
                     *           "endpoint": "https://validator2.qzd.example.com"
                     *         }
                     *       ]
                     *     } */
                    "application/json": {
                        validators?: components["schemas"]["Validator"][];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listAdminAlerts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Alerts retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "alerts": [
                     *         {
                     *           "id": "alert_001",
                     *           "severity": "high",
                     *           "rule": "structuring",
                     *           "ts": "2024-05-02T09:20:00Z",
                     *           "details": {
                     *             "accountId": "acc_123",
                     *             "windowMinutes": 10,
                     *             "transferCount": 4
                     *           }
                     *         },
                     *         {
                     *           "id": "alert_002",
                     *           "severity": "medium",
                     *           "rule": "velocity",
                     *           "ts": "2024-05-02T10:05:00Z",
                     *           "details": {
                     *             "accountId": "acc_456",
                     *             "transferCount": 7
                     *           }
                     *         }
                     *       ]
                     *     } */
                    "application/json": {
                        alerts?: components["schemas"]["Alert"][];
                    };
                };
            };
        };
    };
    acknowledgeAdminAlert: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Alert acknowledged successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listIssuanceRequests: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Issuance requests retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "items": [
                     *         {
                     *           "id": "ir_000001",
                     *           "accountId": "acc_987654321",
                     *           "amount": {
                     *             "currency": "QZD",
                     *             "value": "1000"
                     *           },
                     *           "required": 2,
                     *           "collected": 1,
                     *           "status": "collecting"
                     *         },
                     *         {
                     *           "id": "ir_000002",
                     *           "accountId": "acc_222222222",
                     *           "amount": {
                     *             "currency": "QZD",
                     *             "value": "500"
                     *           },
                     *           "required": 2,
                     *           "collected": 2,
                     *           "status": "ready"
                     *         }
                     *       ]
                     *     } */
                    "application/json": {
                        items?: components["schemas"]["IssuanceRequest"][];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createIssuanceRequest: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key to guarantee idempotent handling of POST requests. */
                "Idempotency-Key": components["parameters"]["IdempotencyKeyHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "accountId": "acc_987654321",
                 *       "amount": {
                 *         "currency": "QZD",
                 *         "value": "1000"
                 *       },
                 *       "reference": "Treasury mint"
                 *     } */
                "application/json": components["schemas"]["IssueRequest"];
            };
        };
        responses: {
            /** @description Issuance request created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "ir_000001",
                     *       "accountId": "acc_987654321",
                     *       "amount": {
                     *         "currency": "QZD",
                     *         "value": "1000"
                     *       },
                     *       "required": 2,
                     *       "collected": 0,
                     *       "status": "pending"
                     *     } */
                    "application/json": components["schemas"]["IssuanceRequest"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    signIssuanceRequest: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key to guarantee idempotent handling of POST requests. */
                "Idempotency-Key": components["parameters"]["IdempotencyKeyHeader"];
            };
            path: {
                /** @description Identifier of the issuance request to sign. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "validatorId": "validator-1"
                 *     } */
                "application/json": {
                    /** @description Identifier of the validator providing the signature. */
                    validatorId: string;
                };
            };
        };
        responses: {
            /** @description Signature recorded successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "ir_000001",
                     *       "accountId": "acc_987654321",
                     *       "amount": {
                     *         "currency": "QZD",
                     *         "value": "1000"
                     *       },
                     *       "required": 2,
                     *       "collected": 1,
                     *       "status": "collecting"
                     *     } */
                    "application/json": components["schemas"]["IssuanceRequest"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            409: components["responses"]["ConflictError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getLiveness: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service is live. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "live"
                     *     } */
                    "application/json": {
                        status?: string;
                    };
                };
            };
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getReadiness: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service is ready. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "ready",
                     *       "dependencies": [
                     *         {
                     *           "name": "database",
                     *           "status": "healthy"
                     *         },
                     *         {
                     *           "name": "validatorNetwork",
                     *           "status": "healthy"
                     *         }
                     *       ]
                     *     } */
                    "application/json": {
                        status?: string;
                        dependencies?: {
                            name?: string;
                            status?: string;
                        }[];
                    };
                };
            };
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
            /** @description Service is not ready. */
            503: {
                headers: {
                    /** @description Suggested wait time before retrying the readiness check in seconds. */
                    "Retry-After"?: number;
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": "SERVICE_UNAVAILABLE",
                     *       "message": "Validator quorum not yet established."
                     *     } */
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    receiveSmsInbound: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key to guarantee idempotent handling of POST requests. */
                "Idempotency-Key": components["parameters"]["IdempotencyKeyHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "from": "5025551234",
                 *       "text": "BAL"
                 *     } */
                "application/json": components["schemas"]["SmsInboundRequest"];
            };
        };
        responses: {
            /** @description SMS command processed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "reply": "Balance: QZD 1,000.00"
                     *     } */
                    "application/json": components["schemas"]["SmsInboundResponse"];
                };
            };
            400: components["responses"]["BadRequestError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
}

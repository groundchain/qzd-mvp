/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new customer and provision an associated account. */
        post: operations["registerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authenticate an existing user and issue a JWT session token. */
        post: operations["loginUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new remittance ledger account. */
        post: operations["createAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{id}/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the latest balance snapshot for an account. */
        get: operations["getAccountBalance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{id}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List transactions recorded for a specific account. */
        get: operations["listAccountTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tx/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Move balances between accounts. */
        post: operations["initiateTransfer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tx/issue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Issue new QZD tokens to an account. */
        post: operations["issueTokens"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tx/redeem": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Redeem QZD tokens for fiat settlement. */
        post: operations["redeemTokens"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/remit/us/acquire-qzd": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Initiate a US remittance flow that acquires QZD liquidity. */
        post: operations["acquireQZDForUSRemittance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/simulate/quote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Simulate a quote for acquiring QZD against a fiat amount. */
        get: operations["simulateQuote"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/validators": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the validator set that anchors the QZD network. */
        get: operations["listValidators"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve open administrative alerts. */
        get: operations["listAdminAlerts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Liveness probe endpoint. */
        get: operations["getLiveness"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Readiness probe endpoint. */
        get: operations["getReadiness"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        MonetaryAmount: {
            currency: string;
            value: string;
        };
        Account: {
            id: string;
            ownerId: string;
            ownerName?: string;
            /** @enum {string} */
            status: "active" | "suspended" | "closed";
            /** Format: date-time */
            createdAt: string;
            metadata?: {
                [key: string]: string;
            };
        };
        Balance: {
            accountId: string;
            currency: string;
            available: components["schemas"]["MonetaryAmount"];
            total: components["schemas"]["MonetaryAmount"];
            /** Format: date-time */
            updatedAt: string;
        };
        Transaction: {
            id: string;
            accountId: string;
            counterpartyAccountId?: string;
            /** @enum {string} */
            type: "credit" | "debit" | "transfer" | "issuance" | "redemption";
            amount: components["schemas"]["MonetaryAmount"];
            /** @enum {string} */
            status: "pending" | "posted" | "failed";
            /** Format: date-time */
            createdAt: string;
            metadata?: {
                [key: string]: string;
            };
        };
        TransferRequest: {
            sourceAccountId: string;
            destinationAccountId: string;
            amount: components["schemas"]["MonetaryAmount"];
            memo?: string;
        };
        IssueRequest: {
            accountId: string;
            amount: components["schemas"]["MonetaryAmount"];
            reference?: string;
        };
        IssueEnvelope: {
            envelopeId: string;
            /** @enum {string} */
            status: "pending" | "completed" | "failed";
            /** Format: date-time */
            submittedAt: string;
            request: components["schemas"]["IssueRequest"];
        };
        RedeemRequest: {
            accountId: string;
            amount: components["schemas"]["MonetaryAmount"];
            destinationBankAccount: {
                bankName: string;
                routingNumber: string;
                accountNumber: string;
            };
        };
        USRemitAcquireQZDRequest: {
            remitterAccountId: string;
            beneficiaryAccountId: string;
            usdAmount: components["schemas"]["MonetaryAmount"];
            purposeCode?: string;
            complianceDeclarations?: {
                sourceOfFunds?: string;
                relationshipToBeneficiary?: string;
            };
        };
        QuoteResponse: {
            quoteId: string;
            sellAmount: components["schemas"]["MonetaryAmount"];
            buyAmount: components["schemas"]["MonetaryAmount"];
            rate: string;
            /** Format: date-time */
            expiresAt: string;
        };
        Validator: {
            id: string;
            name: string;
            status: string;
            /** Format: uri */
            endpoint: string;
        };
        Alert: {
            id: string;
            /** @enum {string} */
            severity: "low" | "medium" | "high";
            message: string;
            /** Format: date-time */
            createdAt: string;
        };
        Error: {
            code: string;
            message: string;
            details?: {
                [key: string]: string;
            };
        };
    };
    responses: {
        /** @description Invalid request payload or parameters. */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "BAD_REQUEST",
                 *       "message": "The provided payload failed validation."
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Authentication credentials are missing or invalid. */
        UnauthorizedError: {
            headers: {
                /** @description Authentication challenge. */
                "WWW-Authenticate"?: string;
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "UNAUTHORIZED",
                 *       "message": "Bearer token is invalid or expired."
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description The authenticated principal lacks required permissions. */
        ForbiddenError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "FORBIDDEN",
                 *       "message": "You do not have access to this resource."
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description The requested resource was not found. */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "NOT_FOUND",
                 *       "message": "Account acc_987654321 was not found."
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description The request conflicts with the current state of the resource. */
        ConflictError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "CONFLICT",
                 *       "message": "Transfer is already in progress."
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Rate limit exceeded. */
        TooManyRequestsError: {
            headers: {
                /** @description Suggested wait time before retrying the request in seconds. */
                "Retry-After"?: number;
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "TOO_MANY_REQUESTS",
                 *       "message": "Rate limit exceeded."
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unexpected server error occurred. */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "code": "INTERNAL_ERROR",
                 *       "message": "An unexpected error occurred."
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        /** @description Unique account identifier. */
        AccountIdPath: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    registerUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "alex.merchant@example.com",
                 *       "password": "Sup3rS3cret!",
                 *       "fullName": "Alex Merchant"
                 *     } */
                "application/json": {
                    /** Format: email */
                    email: string;
                    /** Format: password */
                    password: string;
                    fullName: string;
                };
            };
        };
        responses: {
            /** @description Registration successful. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "userId": "usr_123456789",
                     *       "account": {
                     *         "ownerId": "usr_123456789",
                     *         "id": "acc_987654321",
                     *         "ownerName": "Alex Merchant",
                     *         "status": "active",
                     *         "createdAt": "2024-05-01T12:30:00Z"
                     *       },
                     *       "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                     *     } */
                    "application/json": {
                        userId?: string;
                        account?: components["schemas"]["Account"];
                        /** @description Session token for the newly created user. */
                        token?: string;
                    };
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            409: components["responses"]["ConflictError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    loginUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "alex.merchant@example.com",
                 *       "password": "Sup3rS3cret!"
                 *     } */
                "application/json": {
                    /** Format: email */
                    email: string;
                    /** Format: password */
                    password: string;
                };
            };
        };
        responses: {
            /** @description Login successful. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                     *       "expiresIn": 3600
                     *     } */
                    "application/json": {
                        token?: string;
                        /**
                         * Format: int64
                         * @description Token expiration time in seconds.
                         */
                        expiresIn?: number;
                    };
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "ownerId": "usr_123456789",
                 *       "displayName": "Northbridge Holdings USD Account",
                 *       "metadata": {
                 *         "region": "US"
                 *       }
                 *     } */
                "application/json": {
                    ownerId: string;
                    displayName?: string;
                    metadata?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Account created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "acc_987654321",
                     *       "ownerId": "usr_123456789",
                     *       "ownerName": "Northbridge Holdings",
                     *       "status": "active",
                     *       "createdAt": "2024-05-01T12:30:00Z"
                     *     } */
                    "application/json": components["schemas"]["Account"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            409: components["responses"]["ConflictError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getAccountBalance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique account identifier. */
                id: components["parameters"]["AccountIdPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account balance retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "accountId": "acc_987654321",
                     *       "currency": "USD",
                     *       "available": {
                     *         "currency": "USD",
                     *         "value": "12500.42"
                     *       },
                     *       "total": {
                     *         "currency": "USD",
                     *         "value": "13500.42"
                     *       },
                     *       "updatedAt": "2024-05-02T08:15:00Z"
                     *     } */
                    "application/json": components["schemas"]["Balance"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listAccountTransactions: {
        parameters: {
            query?: {
                /**
                 * @description Maximum number of transactions to return.
                 * @example 50
                 */
                limit?: number;
                /** @description Cursor token for pagination. */
                cursor?: string;
            };
            header?: never;
            path: {
                /** @description Unique account identifier. */
                id: components["parameters"]["AccountIdPath"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Transactions retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "items": [
                     *         {
                     *           "id": "txn_001",
                     *           "accountId": "acc_987654321",
                     *           "type": "credit",
                     *           "amount": {
                     *             "currency": "USD",
                     *             "value": "500.00"
                     *           },
                     *           "status": "posted",
                     *           "createdAt": "2024-05-02T09:00:00Z"
                     *         },
                     *         {
                     *           "id": "txn_002",
                     *           "accountId": "acc_987654321",
                     *           "type": "debit",
                     *           "amount": {
                     *             "currency": "USD",
                     *             "value": "125.00"
                     *           },
                     *           "status": "pending",
                     *           "createdAt": "2024-05-02T10:45:00Z"
                     *         }
                     *       ],
                     *       "nextCursor": null
                     *     } */
                    "application/json": {
                        items?: components["schemas"]["Transaction"][];
                        nextCursor?: string | null;
                    };
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    initiateTransfer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "sourceAccountId": "acc_123",
                 *       "destinationAccountId": "acc_987654321",
                 *       "amount": {
                 *         "currency": "USD",
                 *         "value": "250.00"
                 *       },
                 *       "memo": "Vendor settlement"
                 *     } */
                "application/json": components["schemas"]["TransferRequest"];
            };
        };
        responses: {
            /** @description Transfer accepted for processing. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "txn_103",
                     *       "accountId": "acc_123",
                     *       "counterpartyAccountId": "acc_987654321",
                     *       "type": "transfer",
                     *       "amount": {
                     *         "currency": "USD",
                     *         "value": "250.00"
                     *       },
                     *       "status": "pending",
                     *       "createdAt": "2024-05-02T11:00:00Z"
                     *     } */
                    "application/json": components["schemas"]["Transaction"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            409: components["responses"]["ConflictError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    issueTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "accountId": "acc_987654321",
                 *       "amount": {
                 *         "currency": "QZD",
                 *         "value": "1000"
                 *       },
                 *       "reference": "Treasury mint"
                 *     } */
                "application/json": components["schemas"]["IssueRequest"];
            };
        };
        responses: {
            /** @description Issuance request accepted. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "envelopeId": "issue_env_001",
                     *       "status": "pending",
                     *       "submittedAt": "2024-05-02T11:15:00Z",
                     *       "request": {
                     *         "accountId": "acc_987654321",
                     *         "amount": {
                     *           "currency": "QZD",
                     *           "value": "1000"
                     *         },
                     *         "reference": "Treasury mint"
                     *       }
                     *     } */
                    "application/json": components["schemas"]["IssueEnvelope"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            409: components["responses"]["ConflictError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    redeemTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "accountId": "acc_987654321",
                 *       "amount": {
                 *         "currency": "QZD",
                 *         "value": "500"
                 *       },
                 *       "destinationBankAccount": {
                 *         "bankName": "First Cooperative Bank",
                 *         "routingNumber": "021000021",
                 *         "accountNumber": "0987654321"
                 *       }
                 *     } */
                "application/json": components["schemas"]["RedeemRequest"];
            };
        };
        responses: {
            /** @description Redemption request accepted. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "id": "txn_red_001",
                     *       "accountId": "acc_987654321",
                     *       "type": "redemption",
                     *       "amount": {
                     *         "currency": "QZD",
                     *         "value": "500"
                     *       },
                     *       "status": "pending",
                     *       "createdAt": "2024-05-02T11:30:00Z"
                     *     } */
                    "application/json": components["schemas"]["Transaction"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            409: components["responses"]["ConflictError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    acquireQZDForUSRemittance: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "remitterAccountId": "acc_444",
                 *       "beneficiaryAccountId": "acc_555",
                 *       "usdAmount": {
                 *         "currency": "USD",
                 *         "value": "1500.00"
                 *       },
                 *       "purposeCode": "FAMILY_SUPPORT",
                 *       "complianceDeclarations": {
                 *         "sourceOfFunds": "Salary",
                 *         "relationshipToBeneficiary": "Sibling"
                 *       }
                 *     } */
                "application/json": components["schemas"]["USRemitAcquireQZDRequest"];
            };
        };
        responses: {
            /** @description Remittance request accepted. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "requestId": "remit_req_001",
                     *       "status": "pending",
                     *       "quote": {
                     *         "quoteId": "quote_123",
                     *         "sellAmount": {
                     *           "currency": "USD",
                     *           "value": "1500.00"
                     *         },
                     *         "buyAmount": {
                     *           "currency": "QZD",
                     *           "value": "1490.00"
                     *         },
                     *         "rate": "0.9933",
                     *         "expiresAt": "2024-05-02T11:40:00Z"
                     *       }
                     *     } */
                    "application/json": {
                        requestId?: string;
                        status?: string;
                        quote?: components["schemas"]["QuoteResponse"];
                    };
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            409: components["responses"]["ConflictError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    simulateQuote: {
        parameters: {
            query: {
                /** @example USD */
                sellCurrency: string;
                /** @example 1000.00 */
                sellAmount: string;
                /** @example QZD */
                buyCurrency: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Quote simulated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "quoteId": "quote_789",
                     *       "sellAmount": {
                     *         "currency": "USD",
                     *         "value": "1000.00"
                     *       },
                     *       "buyAmount": {
                     *         "currency": "QZD",
                     *         "value": "995.00"
                     *       },
                     *       "rate": "0.9950",
                     *       "expiresAt": "2024-05-02T12:00:00Z"
                     *     } */
                    "application/json": components["schemas"]["QuoteResponse"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listValidators: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Validator list retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "validators": [
                     *         {
                     *           "id": "val_001",
                     *           "name": "QZD Northern Node",
                     *           "status": "active",
                     *           "endpoint": "https://validator1.qzd.example.com"
                     *         },
                     *         {
                     *           "id": "val_002",
                     *           "name": "QZD Southern Node",
                     *           "status": "standby",
                     *           "endpoint": "https://validator2.qzd.example.com"
                     *         }
                     *       ]
                     *     } */
                    "application/json": {
                        validators?: components["schemas"]["Validator"][];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listAdminAlerts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Alerts retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "alerts": [
                     *         {
                     *           "id": "alert_001",
                     *           "severity": "high",
                     *           "message": "Validator quorum degradation detected.",
                     *           "createdAt": "2024-05-02T09:20:00Z"
                     *         },
                     *         {
                     *           "id": "alert_002",
                     *           "severity": "medium",
                     *           "message": "Delayed settlement from correspondent bank.",
                     *           "createdAt": "2024-05-02T10:05:00Z"
                     *         }
                     *       ]
                     *     } */
                    "application/json": {
                        alerts?: components["schemas"]["Alert"][];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getLiveness: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service is live. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "live"
                     *     } */
                    "application/json": {
                        status?: string;
                    };
                };
            };
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getReadiness: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service is ready. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "ready",
                     *       "dependencies": [
                     *         {
                     *           "name": "database",
                     *           "status": "healthy"
                     *         },
                     *         {
                     *           "name": "validatorNetwork",
                     *           "status": "healthy"
                     *         }
                     *       ]
                     *     } */
                    "application/json": {
                        status?: string;
                        dependencies?: {
                            name?: string;
                            status?: string;
                        }[];
                    };
                };
            };
            429: components["responses"]["TooManyRequestsError"];
            500: components["responses"]["InternalServerError"];
            /** @description Service is not ready. */
            503: {
                headers: {
                    /** @description Suggested wait time before retrying the readiness check in seconds. */
                    "Retry-After"?: number;
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "code": "SERVICE_UNAVAILABLE",
                     *       "message": "Validator quorum not yet established."
                     *     } */
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}

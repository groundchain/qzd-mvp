openapi: 3.0.3
info:
  title: QZD Remittance API
  version: 0.1.0
  license:
    name: Proprietary
    url: https://legal.qzd.rovira.pro/licenses/proprietary
  description: |
    The QZD Remittance API enables account management, digital asset issuance and redemption,
    and remittance operations with comprehensive observability and admin tooling.
servers:
  - url: https://api.qzd.rovira.pro
    description: Production server
  - url: https://sandbox.qzd.rovira.pro
    description: Sandbox server
security:
  - BearerAuth: []
tags:
  - name: Auth
    description: Authentication workflows for user registration and login.
  - name: Accounts
    description: Account provisioning, balances, and transaction history.
  - name: Ledger
    description: Ledger-specific operations and reconciliation endpoints.
  - name: Transactions
    description: Money movement operations including transfers and issuance.
  - name: Remittances
    description: Cross-border remittance flows and related quote operations.
  - name: Admin
    description: Administrative visibility and alert management endpoints.
  - name: Agents
    description: Agent cash-in, cash-out, and voucher reconciliation workflows.
  - name: Sms
    description: Inbound SMS command processing and responses.
  - name: Health
    description: Service health and readiness probes.
paths:
  /auth/register:
    post:
      tags:
        - Auth
      operationId: registerUser
      summary: Register a new customer and provision an associated account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                fullName:
                  type: string
              required:
                - email
                - password
                - fullName
            example:
              email: "alex.merchant@example.com"
              password: "Sup3rS3cret!"
              fullName: "Alex Merchant"
      responses:
        '201':
          description: Registration successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  account:
                    $ref: '#/components/schemas/Account'
                  token:
                    type: string
                    description: Session token for the newly created user.
              example:
                userId: "usr_123456789"
                account:
                  ownerId: "usr_123456789"
                  id: "acc_987654321"
                  ownerName: "Alex Merchant"
                  status: ACTIVE
                  kycLevel: BASIC
                  createdAt: "2024-05-01T12:30:00Z"
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security: []
  /auth/login:
    post:
      tags:
        - Auth
      operationId: loginUser
      summary: Authenticate an existing user and issue a JWT session token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
            example:
              email: "alex.merchant@example.com"
              password: "Sup3rS3cret!"
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  expiresIn:
                    type: integer
                    format: int64
                    description: Token expiration time in seconds.
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                expiresIn: 3600
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security: []
  /accounts:
    post:
      tags:
        - Accounts
      operationId: createAccount
      summary: Create a new remittance ledger account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ownerId:
                  type: string
                displayName:
                  type: string
                metadata:
                  type: object
                  additionalProperties:
                    type: string
              required:
                - ownerId
            example:
              ownerId: "usr_123456789"
              displayName: "Northbridge Holdings USD Account"
              metadata:
                region: "US"
      responses:
        '201':
          description: Account created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
              example:
                id: "acc_987654321"
                ownerId: "usr_123456789"
                ownerName: "Northbridge Holdings"
                status: ACTIVE
                kycLevel: BASIC
                createdAt: "2024-05-01T12:30:00Z"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /accounts/kyc:
    post:
      tags:
        - Accounts
      operationId: uploadAccountKyc
      summary: Submit KYC evidence for an existing account.
      description: >-
        Upload new metadata, documents, or questionnaire answers to advance an
        account's KYC status. Approved submissions can upgrade the account to
        FULL status, unlocking higher daily transfer limits.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadAccountKycRequest'
            example:
              accountId: "acc_987654321"
              kycLevel: FULL
              metadata:
                documentType: "PASSPORT"
                documentNumber: "123456789"
      responses:
        '200':
          description: Account KYC metadata accepted and account updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /accounts/{id}/balance:
    get:
      tags:
        - Accounts
        - Ledger
      operationId: getAccountBalance
      summary: Retrieve the latest balance snapshot for an account.
      parameters:
        - $ref: '#/components/parameters/AccountIdPath'
      responses:
        '200':
          description: Account balance retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance'
              example:
                accountId: "acc_987654321"
                currency: "USD"
                available:
                  currency: "USD"
                  value: "12500.42"
                total:
                  currency: "USD"
                  value: "13500.42"
                updatedAt: "2024-05-02T08:15:00Z"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /accounts/{id}/transactions:
    get:
      tags:
        - Accounts
        - Transactions
      operationId: listAccountTransactions
      summary: List transactions recorded for a specific account.
      parameters:
        - $ref: '#/components/parameters/AccountIdPath'
        - name: limit
          in: query
          description: Maximum number of transactions to return.
          schema:
            type: integer
            minimum: 1
            maximum: 200
          example: 50
        - name: cursor
          in: query
          description: Cursor token for pagination.
          schema:
            type: string
      responses:
        '200':
          description: Transactions retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  nextCursor:
                    type: string
                    nullable: true
              example:
                items:
                  - id: "txn_001"
                    accountId: "acc_987654321"
                    type: credit
                    amount:
                      currency: "USD"
                      value: "500.00"
                    status: posted
                    createdAt: "2024-05-02T09:00:00Z"
                  - id: "txn_002"
                    accountId: "acc_987654321"
                    type: debit
                    amount:
                      currency: "USD"
                      value: "125.00"
                    status: pending
                    createdAt: "2024-05-02T10:45:00Z"
                nextCursor: null
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tx/transfer:
    post:
      tags:
        - Transactions
      operationId: initiateTransfer
      summary: Move balances between accounts.
      description: >-
        Transfers are limited by the originating account's KYC tier. BASIC
        accounts may send up to Q5,000 per day while FULL accounts may send up
        to Q50,000 per day. Requests exceeding these thresholds will be
        rejected with a LIMIT_EXCEEDED error.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
            example:
              sourceAccountId: "acc_123"
              destinationAccountId: "acc_987654321"
              amount:
                currency: "USD"
                value: "250.00"
              memo: "Vendor settlement"
      responses:
        '202':
          description: Transfer accepted for processing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
              example:
                id: "txn_103"
                accountId: "acc_123"
                counterpartyAccountId: "acc_987654321"
                type: transfer
                amount:
                  currency: "USD"
                  value: "250.00"
                status: pending
                createdAt: "2024-05-02T11:00:00Z"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tx/issue:
    post:
      tags:
        - Transactions
        - Ledger
      operationId: issueTokens
      summary: Execute an approved issuance request and credit the beneficiary account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                requestId:
                  type: string
                  description: Identifier of the approved issuance request.
              required:
                - requestId
            example:
              requestId: "ir_000001"
      responses:
        '200':
          description: Issuance executed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
              example:
                id: "txn_issuance_001"
                accountId: "acc_987654321"
                type: issuance
                amount:
                  currency: "QZD"
                  value: "1000"
                status: posted
                createdAt: "2024-05-02T11:15:00Z"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tx/redeem:
    post:
      tags:
        - Transactions
        - Ledger
      operationId: redeemTokens
      summary: Redeem QZD tokens for fiat settlement.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RedeemRequest'
            example:
              accountId: "acc_987654321"
              amount:
                currency: "QZD"
                value: "500"
              destinationBankAccount:
                bankName: "First Cooperative Bank"
                routingNumber: "021000021"
                accountNumber: "0987654321"
      responses:
        '202':
          description: Redemption request accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
              example:
                id: "txn_red_001"
                accountId: "acc_987654321"
                type: redemption
                amount:
                  currency: "QZD"
                  value: "500"
                status: pending
                createdAt: "2024-05-02T11:30:00Z"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /agents/cashin:
    post:
      tags:
        - Agents
      operationId: agentCashIn
      summary: Accept cash-in from an agent and credit their QZD balance.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentCashInRequest'
            example:
              accountId: "acc_987654321"
              amount:
                currency: "QZD"
                value: "250.00"
              memo: "Float top-up"
      responses:
        '201':
          description: Cash-in recorded successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
              example:
                id: "txn_cash_in_001"
                accountId: "acc_987654321"
                type: credit
                amount:
                  currency: "QZD"
                  value: "250.00"
                status: posted
                createdAt: "2024-05-02T12:00:00Z"
                metadata:
                  memo: "Float top-up"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /agents/cashout:
    post:
      tags:
        - Agents
      operationId: agentCashOut
      summary: Convert QZD balance into a voucher code for payout.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentCashOutRequest'
            example:
              accountId: "acc_987654321"
              amount:
                currency: "QZD"
                value: "100.00"
              memo: "Branch disbursement"
      responses:
        '201':
          description: Voucher issued for cash out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voucher'
              example:
                code: "vch_000123"
                accountId: "acc_987654321"
                amount:
                  currency: "QZD"
                  value: "100.00"
                fee:
                  currency: "QZD"
                  value: "0.50"
                totalDebited:
                  currency: "QZD"
                  value: "100.50"
                status: issued
                createdAt: "2024-05-02T12:05:00Z"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /agents/vouchers/{code}/redeem:
    post:
      tags:
        - Agents
      operationId: redeemVoucher
      summary: Redeem an issued voucher code and finalize payout.
      parameters:
        - name: code
          in: path
          required: true
          description: Voucher code issued during agent cash-out.
          schema:
            type: string
      responses:
        '201':
          description: Voucher redeemed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voucher'
              example:
                code: "vch_000123"
                accountId: "acc_987654321"
                amount:
                  currency: "QZD"
                  value: "100.00"
                fee:
                  currency: "QZD"
                  value: "0.50"
                totalDebited:
                  currency: "QZD"
                  value: "100.50"
                status: redeemed
                createdAt: "2024-05-02T12:05:00Z"
                redeemedAt: "2024-05-02T12:15:00Z"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /remit/us/acquire-qzd:
    post:
      tags:
        - Remittances
      operationId: acquireQZDForUSRemittance
      summary: Initiate a US remittance flow that acquires QZD liquidity.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/USRemitAcquireQZDRequest'
            example:
              usdAmount:
                currency: "USD"
                value: "125.00"
              senderPhone: "+14155551212"
              receiverAccountId: "acc_beneficiary_001"
      responses:
        '202':
          description: QZD issued to the beneficiary account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
              example:
                id: "txn_issuance_001"
                accountId: "acc_beneficiary_001"
                type: issuance
                amount:
                  currency: "QZD"
                  value: "965.51"
                status: posted
                createdAt: "2024-05-02T11:40:00Z"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /simulate/quote:
    get:
      tags:
        - Remittances
      operationId: simulateQuote
      summary: Simulate a quote for acquiring QZD against a fiat amount.
      parameters:
        - name: usdAmount
          in: query
          required: true
          schema:
            type: string
            pattern: "^\\d+(?:\\.\\d+)?$"
          example: "100.00"
        - name: scenario
          in: query
          required: false
          description: |
            Pricing program to apply to the remittance quote. Allowed values: DEFAULT,
            TARIFFED, SUBSIDIZED.
          schema:
            type: string
          example: DEFAULT
      responses:
        '200':
          description: Quote simulated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteResponse'
              example:
                quoteId: "quote_default_100"
                sellAmount:
                  currency: "USD"
                  value: "100.00"
                buyAmount:
                  currency: "QZD"
                  value: "772.28"
                rate: "7.7228"
                expiresAt: "2024-05-02T12:00:00Z"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /validators:
    get:
      tags:
        - Ledger
      operationId: listValidators
      summary: Retrieve the validator set that anchors the QZD network.
      responses:
        '200':
          description: Validator list retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  validators:
                    type: array
                    items:
                      $ref: '#/components/schemas/Validator'
              example:
                validators:
                  - id: "val_001"
                    name: "QZD Northern Node"
                    status: ACTIVE
                    kycLevel: FULL
                    endpoint: "https://validator1.qzd.example.com"
                  - id: "val_002"
                    name: "QZD Southern Node"
                    status: standby
                    endpoint: "https://validator2.qzd.example.com"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /admin/alerts:
    get:
      tags:
        - Admin
      operationId: listAdminAlerts
      summary: Retrieve open administrative alerts.
      responses:
        '200':
          description: Alerts retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  alerts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Alert'
              example:
                alerts:
                  - id: "alert_001"
                    severity: high
                    message: "Validator quorum degradation detected."
                    createdAt: "2024-05-02T09:20:00Z"
                  - id: "alert_002"
                    severity: medium
                    message: "Delayed settlement from correspondent bank."
                    createdAt: "2024-05-02T10:05:00Z"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /admin/issuance-requests:
    get:
      tags:
        - Admin
      operationId: listIssuanceRequests
      summary: List issuance requests awaiting validator review.
      responses:
        '200':
          description: Issuance requests retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/IssuanceRequest'
              example:
                items:
                  - id: "ir_000001"
                    accountId: "acc_987654321"
                    amount:
                      currency: "QZD"
                      value: "1000"
                    required: 2
                    collected: 1
                    status: collecting
                  - id: "ir_000002"
                    accountId: "acc_222222222"
                    amount:
                      currency: "QZD"
                      value: "500"
                    required: 2
                    collected: 2
                    status: ready
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Admin
        - Ledger
      operationId: createIssuanceRequest
      summary: Submit a new issuance request to the validator queue.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueRequest'
            example:
              accountId: "acc_987654321"
              amount:
                currency: "QZD"
                value: "1000"
              reference: "Treasury mint"
      responses:
        '201':
          description: Issuance request created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuanceRequest'
              example:
                id: "ir_000001"
                accountId: "acc_987654321"
                amount:
                  currency: "QZD"
                  value: "1000"
                required: 2
                collected: 0
                status: pending
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /admin/issuance-requests/{id}/sign:
    post:
      tags:
        - Admin
      operationId: signIssuanceRequest
      summary: Record a validator signature for the issuance request.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Identifier of the issuance request to sign.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                validatorId:
                  type: string
                  description: Identifier of the validator providing the signature.
              required:
                - validatorId
            example:
              validatorId: "validator-1"
      responses:
        '200':
          description: Signature recorded successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuanceRequest'
              example:
                id: "ir_000001"
                accountId: "acc_987654321"
                amount:
                  currency: "QZD"
                  value: "1000"
                required: 2
                collected: 1
                status: collecting
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /health/live:
    get:
      tags:
        - Health
      operationId: getLiveness
      summary: Liveness probe endpoint.
      responses:
        '200':
          description: Service is live.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
              example:
                status: "live"
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security: []
  /health/ready:
    get:
      tags:
        - Health
      operationId: getReadiness
      summary: Readiness probe endpoint.
      responses:
        '200':
          description: Service is ready.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  dependencies:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        status:
                          type: string
              example:
                status: "ready"
                dependencies:
                  - name: database
                    status: healthy
                  - name: validatorNetwork
                    status: healthy
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '503':
          description: Service is not ready.
          headers:
            Retry-After:
              description: Suggested wait time before retrying the readiness check in seconds.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "SERVICE_UNAVAILABLE"
                message: "Validator quorum not yet established."
        '500':
          $ref: '#/components/responses/InternalServerError'
      security: []
  /sms/inbound:
    post:
      tags:
        - Sms
      operationId: receiveSmsInbound
      summary: Forward an inbound SMS command for processing.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmsInboundRequest'
            example:
              from: "5025551234"
              text: "BAL"
      responses:
        '200':
          description: SMS command processed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmsInboundResponse'
              example:
                reply: "Balance: QZD 1,000.00"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    AccountIdPath:
      name: id
      in: path
      required: true
      description: Unique account identifier.
      schema:
        type: string
  responses:
    BadRequestError:
      description: Invalid request payload or parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "BAD_REQUEST"
            message: "The provided payload failed validation."
    UnauthorizedError:
      description: Authentication credentials are missing or invalid.
      headers:
        WWW-Authenticate:
          schema:
            type: string
          description: Authentication challenge.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "UNAUTHORIZED"
            message: "Bearer token is invalid or expired."
    ForbiddenError:
      description: The authenticated principal lacks required permissions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "FORBIDDEN"
            message: "You do not have access to this resource."
    NotFoundError:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "NOT_FOUND"
            message: "Account acc_987654321 was not found."
    ConflictError:
      description: The request conflicts with the current state of the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "CONFLICT"
            message: "Transfer is already in progress."
    TooManyRequestsError:
      description: Rate limit exceeded.
      headers:
        Retry-After:
          description: Suggested wait time before retrying the request in seconds.
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "TOO_MANY_REQUESTS"
            message: "Rate limit exceeded."
    InternalServerError:
      description: Unexpected server error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "INTERNAL_ERROR"
            message: "An unexpected error occurred."
  schemas:
    MonetaryAmount:
      type: object
      properties:
        currency:
          type: string
        value:
          type: string
      required:
        - currency
        - value
    Account:
      type: object
      properties:
        id:
          type: string
        ownerId:
          type: string
        ownerName:
          type: string
        status:
          type: string
          description: >-
            Current account state. Frozen accounts are blocked from initiating
            transfers until reactivated.
          enum:
            - ACTIVE
            - FROZEN
        kycLevel:
          type: string
          description: >-
            Know Your Customer (KYC) tier that controls daily transfer limits.
            BASIC accounts may move up to Q5,000 per day while FULL accounts may
            transfer up to Q50,000 per day.
          enum:
            - BASIC
            - FULL
        createdAt:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties:
            type: string
      required:
        - id
        - ownerId
        - status
        - kycLevel
        - createdAt
    UploadAccountKycRequest:
      type: object
      properties:
        accountId:
          type: string
        kycLevel:
          type: string
          enum:
            - BASIC
            - FULL
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Structured evidence payload such as document references.
      required:
        - accountId
        - kycLevel
        - metadata
    Balance:
      type: object
      properties:
        accountId:
          type: string
        currency:
          type: string
        available:
          $ref: '#/components/schemas/MonetaryAmount'
        total:
          $ref: '#/components/schemas/MonetaryAmount'
        updatedAt:
          type: string
          format: date-time
      required:
        - accountId
        - currency
        - available
        - total
        - updatedAt
    Transaction:
      type: object
      properties:
        id:
          type: string
        accountId:
          type: string
        counterpartyAccountId:
          type: string
        type:
          type: string
          enum:
            - credit
            - debit
            - transfer
            - issuance
            - redemption
        amount:
          $ref: '#/components/schemas/MonetaryAmount'
        status:
          type: string
          enum:
            - pending
            - posted
            - failed
        createdAt:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties:
            type: string
      required:
        - id
        - accountId
        - type
        - amount
        - status
        - createdAt
    TransferRequest:
      type: object
      description: >-
        Transfer instructions count toward an account's daily movement limit.
        BASIC accounts may submit no more than Q5,000 per 24-hour window while
        FULL accounts may transfer up to Q50,000.
      properties:
        sourceAccountId:
          type: string
        destinationAccountId:
          type: string
        amount:
          $ref: '#/components/schemas/MonetaryAmount'
        memo:
          type: string
      required:
        - sourceAccountId
        - destinationAccountId
        - amount
    AgentCashInRequest:
      type: object
      properties:
        accountId:
          type: string
        amount:
          $ref: '#/components/schemas/MonetaryAmount'
        memo:
          type: string
          description: Optional note describing the cash-in event.
      required:
        - accountId
        - amount
    AgentCashOutRequest:
      type: object
      properties:
        accountId:
          type: string
        amount:
          $ref: '#/components/schemas/MonetaryAmount'
        memo:
          type: string
          description: Optional note describing the disbursement.
      required:
        - accountId
        - amount
    IssueRequest:
      type: object
      properties:
        accountId:
          type: string
        amount:
          $ref: '#/components/schemas/MonetaryAmount'
        reference:
          type: string
      required:
        - accountId
        - amount
    IssueEnvelope:
      type: object
      properties:
        envelopeId:
          type: string
        status:
          type: string
          enum:
            - pending
            - completed
            - failed
        submittedAt:
          type: string
          format: date-time
        request:
          $ref: '#/components/schemas/IssueRequest'
      required:
        - envelopeId
        - status
        - submittedAt
        - request
    IssuanceRequest:
      type: object
      description: Track validator approvals for a queued issuance.
      properties:
        id:
          type: string
        accountId:
          type: string
        amount:
          $ref: '#/components/schemas/MonetaryAmount'
        required:
          type: integer
          format: int32
          description: Number of validator signatures required for approval.
        collected:
          type: integer
          format: int32
          description: Number of validator signatures collected so far.
        status:
          type: string
          enum:
            - pending
            - collecting
            - ready
            - completed
      required:
        - id
        - accountId
    Voucher:
      type: object
      properties:
        code:
          type: string
        accountId:
          type: string
        amount:
          $ref: '#/components/schemas/MonetaryAmount'
        fee:
          $ref: '#/components/schemas/MonetaryAmount'
        totalDebited:
          $ref: '#/components/schemas/MonetaryAmount'
        status:
          type: string
          enum:
            - issued
            - redeemed
        createdAt:
          type: string
          format: date-time
        redeemedAt:
          type: string
          format: date-time
          description: Timestamp when the voucher was redeemed.
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Additional context captured during issuance or redemption.
      required:
        - code
        - accountId
        - amount
        - fee
        - totalDebited
        - status
        - createdAt
        - amount
        - required
        - collected
        - status
    RedeemRequest:
      type: object
      properties:
        accountId:
          type: string
        amount:
          $ref: '#/components/schemas/MonetaryAmount'
        destinationBankAccount:
          type: object
          properties:
            bankName:
              type: string
            routingNumber:
              type: string
            accountNumber:
              type: string
          required:
            - bankName
            - routingNumber
            - accountNumber
      required:
        - accountId
        - amount
        - destinationBankAccount
    USRemitAcquireQZDRequest:
      type: object
      properties:
        usdAmount:
          $ref: '#/components/schemas/MonetaryAmount'
        senderPhone:
          type: string
          description: MSISDN of the sender initiating the remittance.
        receiverAccountId:
          type: string
          description: Beneficiary account identifier if known.
        receiverPhone:
          type: string
          description: Beneficiary phone number when an account identifier is unavailable.
        scenario:
          type: string
          description: Optional pricing program override for this acquisition.
          enum:
            - DEFAULT
            - TARIFFED
            - SUBSIDIZED
      required:
        - usdAmount
        - senderPhone
    QuoteResponse:
      type: object
      properties:
        quoteId:
          type: string
        sellAmount:
          $ref: '#/components/schemas/MonetaryAmount'
        buyAmount:
          $ref: '#/components/schemas/MonetaryAmount'
        rate:
          type: string
        expiresAt:
          type: string
          format: date-time
      required:
        - quoteId
        - sellAmount
        - buyAmount
        - rate
        - expiresAt
    Validator:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          type: string
        endpoint:
          type: string
          format: uri
      required:
        - id
        - name
        - status
        - endpoint
    Alert:
      type: object
      properties:
        id:
          type: string
        severity:
          type: string
          enum:
            - low
            - medium
            - high
        message:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - severity
        - message
        - createdAt
    SmsInboundRequest:
      type: object
      description: Inbound SMS payload forwarded from the messaging gateway.
      properties:
        from:
          type: string
          description: MSISDN of the sender initiating the command.
        text:
          type: string
          description: Body of the received SMS message.
      required:
        - from
        - text
    SmsInboundResponse:
      type: object
      description: Response payload containing the SMS reply text.
      properties:
        reply:
          type: string
          description: Text that should be sent back to the sender.
      required:
        - reply
    Error:
      type: object
      properties:
        code:
          type: string
          enum:
            - BAD_REQUEST
            - UNAUTHORIZED
            - FORBIDDEN
            - NOT_FOUND
            - CONFLICT
            - TOO_MANY_REQUESTS
            - INTERNAL_ERROR
            - SERVICE_UNAVAILABLE
            - LIMIT_EXCEEDED
            - ACCOUNT_FROZEN
        message:
          type: string
        details:
          type: object
          additionalProperties:
            type: string
      required:
        - code
        - message
